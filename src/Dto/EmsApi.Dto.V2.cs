//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.19.2.0 (NJsonSchema v9.10.73.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace EmsApi.Dto.V2
{
    #pragma warning disable // Disable all warnings

    

    /// <summary>Provides an identifier for an individual analytic.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticId 
    {
        /// <summary>The unique string identifier of the analytic.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticId FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticId>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about an analytic.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticInfo 
    {
        /// <summary>The identifier for the analytic</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The name of the analytic</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The description of the analytic</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The units of the analytic</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messageDetail", Required = Newtonsoft.Json.Required.Always)]
        public string MessageDetail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unexpected", Required = Newtonsoft.Json.Required.Always)]
        public bool Unexpected { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }
    
    }
    
    /// <summary>Represents the contents of an analytic group.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticGroupContents 
    {
        /// <summary>An in-order listing of the groups contained in the specified group</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticGroup> Groups { get; set; }
    
        /// <summary>An in-order listing of the analytics contained in the specified group</summary>
        [Newtonsoft.Json.JsonProperty("analytics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticInfo> Analytics { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticGroupContents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticGroupContents>(data);
        }
    
    }
    
    /// <summary>Represents a group in the exposed tree of analytics for an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticGroup 
    {
        /// <summary>The identifier of the group</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The name of the group</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The description of the group</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticGroup>(data);
        }
    
    }
    
    /// <summary>Represents the options used to make up an analytic query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Query 
    {
        /// <summary>An array specifying the analytics to select and return in query results. Use null or an empty array to
        ///             return only offset values</summary>
        [Newtonsoft.Json.JsonProperty("select", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticSelect> Select { get; set; } = new System.Collections.ObjectModel.ObservableCollection<AnalyticSelect>();
    
        /// <summary>The optional start offset in the data, in seconds from the start of the data. If not specified, the 
        ///             beginning of the available data is used</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Start { get; set; }
    
        /// <summary>The optional end offset in the data, in seconds from the start of the data. If not specified, the 
        ///             end of the available data is used</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? End { get; set; }
    
        /// <summary>The optional set of offsets to return in query results. Use as an alternative to specifying a range of 
        ///             values using start and end</summary>
        [Newtonsoft.Json.JsonProperty("offsets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> Offsets { get; set; }
    
        /// <summary>The optional limit that specifies the total number of offsets and values to return in query results</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        /// <summary>This determines how to treat data values for offsets that are not sampled. If left unset this defaults to 'leaveBlank'.
        ///             This only applies when performing queries using "offsetType"</summary>
        [Newtonsoft.Json.JsonProperty("unsampledDataMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryUnsampledDataMode? UnsampledDataMode { get; set; }
    
        /// <summary>This optional parameter replaces any unsampled (blank) values with a constant value. This defaults to a null value.
        ///             This only applies when performing queries using "offsetType"</summary>
        [Newtonsoft.Json.JsonProperty("unsampledValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnsampledValue { get; set; }
    
        /// <summary>This optional parameter replaces any values that come back as DNE (does not exist) with a constant value. This defaults to "DNE".
        ///             This only applies when performing queries using "offsetType"</summary>
        [Newtonsoft.Json.JsonProperty("doesNotExistValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DoesNotExistValue { get; set; }
    
        /// <summary>This defines the way in which the offsets are determined. This is required if Offsets or Size has not been set</summary>
        [Newtonsoft.Json.JsonProperty("offsetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetType OffsetType { get; set; }
    
        /// <summary>This optional parameter, when set to true, displays discrete values as their respective string values. This defaults to true.
        ///             This only applies when performing queries using "offsetType"</summary>
        [Newtonsoft.Json.JsonProperty("discretesAsStrings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiscretesAsStrings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Query FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Query>(data);
        }
    
    }
    
    /// <summary>Represents an individual analytic that can be selected in a query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticSelect 
    {
        /// <summary>The unique string identifier of the analytic to select in a query</summary>
        [Newtonsoft.Json.JsonProperty("analyticId", Required = Newtonsoft.Json.Required.Always)]
        public string AnalyticId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticSelect FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticSelect>(data);
        }
    
    }
    
    /// <summary>Class for determining which offsets to sample an analytic at.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffsetType 
    {
        /// <summary>Determines the way to retrieve samples for an analytic query.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetTypeType Type { get; set; }
    
        /// <summary>Offsets are calculated using this sampling rate when using 'FixedRate' sampling type.</summary>
        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SamplingRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OffsetType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OffsetType>(data);
        }
    
    }
    
    /// <summary>Represents the time-series data result of an analytic query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class QueryResult 
    {
        /// <summary>An array of query result offsets, each representing seconds from the start of the data</summary>
        [Newtonsoft.Json.JsonProperty("offsets", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<double> Offsets { get; set; } = new System.Collections.ObjectModel.ObservableCollection<double>();
    
        /// <summary>An array of analytic result values for each of the analytics selected in the query containing values for
        ///             each offset</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticResult> Results { get; set; } = new System.Collections.ObjectModel.ObservableCollection<AnalyticResult>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static QueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryResult>(data);
        }
    
    }
    
    /// <summary>Represents the results of a query of an individual analytic, housing the values for the offsets contained
    ///             in the related query result.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticResult 
    {
        /// <summary>The unique string identifier of the analytic queried</summary>
        [Newtonsoft.Json.JsonProperty("analyticId", Required = Newtonsoft.Json.Required.Always)]
        public string AnalyticId { get; set; }
    
        /// <summary>The array of analytic values corresponding to offsets specified in the query result</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<object> Values { get; set; } = new System.Collections.ObjectModel.ObservableCollection<object>();
    
        /// <summary>Any error that may have occurred when retrieving or attempting to retrieve the values for the analytic.
        ///             This field is only available if there is an error.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticResult>(data);
        }
    
    }
    
    /// <summary>Encapsulates metadata information for a parameter or analytic in EMS.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Metadata 
    {
        /// <summary>The metadata for the object.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MetadataItem> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Metadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Metadata>(data);
        }
    
    }
    
    /// <summary>Encapsulates a single piece of metadata.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetadataItem 
    {
        /// <summary>The metadata key.</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        /// <summary>The metadata value.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataItem>(data);
        }
    
    }
    
    /// <summary>A container for analytic sets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticSetGroup 
    {
        /// <summary>The name of the group.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The ID of the group. This should be a relative path with backslashes replaced with colons.</summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }
    
        /// <summary>An array of groups contained by this group.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticSetGroup> Groups { get; set; }
    
        /// <summary>An array of analytic sets contained by this group.</summary>
        [Newtonsoft.Json.JsonProperty("sets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticSet> Sets { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticSetGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticSetGroup>(data);
        }
    
    }
    
    /// <summary>Encapsulates the data that defines an AnalyticSet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticSet 
    {
        /// <summary>The name of the AnalyticSet.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>An optional description of the ParameterSet.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>An array of the analytics contained in the AnalyticSet.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyticSetItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticSet>(data);
        }
    
    }
    
    /// <summary>A model that encapsulates the data for a single analytic in an analytic set.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnalyticSetItem 
    {
        /// <summary>The index of the chart that this analytic info belongs to, or null if no index specified.</summary>
        [Newtonsoft.Json.JsonProperty("chartIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChartIndex { get; set; }
    
        /// <summary>The analytic that is represented by this analytic set item.</summary>
        [Newtonsoft.Json.JsonProperty("analytic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnalyticInfo Analytic { get; set; }
    
        /// <summary>The custom name the user specified for the item, or null if not-specified.</summary>
        [Newtonsoft.Json.JsonProperty("customName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomName { get; set; }
    
        /// <summary>The color to use for the line in hexadecimal color specification "#RRGGBB", or null if no color specified.</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }
    
        /// <summary>Optional override for the vertical scale for an analytic.</summary>
        [Newtonsoft.Json.JsonProperty("customRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataRange CustomRange { get; set; }
    
        /// <summary>Optional override for the number of digits to display.</summary>
        [Newtonsoft.Json.JsonProperty("customDigitsAfterDecimal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomDigitsAfterDecimal { get; set; }
    
        /// <summary>Optional value from 1 to 5 for the width of the line.</summary>
        [Newtonsoft.Json.JsonProperty("lineWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineWidth { get; set; }
    
        /// <summary>Optional value specifying whether the parrmeter should display shapes to indicate the sampled values.</summary>
        [Newtonsoft.Json.JsonProperty("displaySampleMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplaySampleMarker { get; set; }
    
        /// <summary>If set, describes the shape to use for the sampled values.
        ///             Possible values: [Square, Circle, Triangle, InvertedTriangle, Cross, Star]</summary>
        [Newtonsoft.Json.JsonProperty("sampleMarkerShape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SampleMarkerShape { get; set; }
    
        /// <summary>If set, describes the line style to use when drawing.
        ///             Possible values: [Dash, Dot, DashDot, DashDotDot, Solid]</summary>
        [Newtonsoft.Json.JsonProperty("lineStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineStyle { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyticSetItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyticSetItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DataRange 
    {
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }
    
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DataRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataRange>(data);
        }
    
    }
    
    /// <summary>Represents a 'Fleet' in the EMS system.
    ///             A fleet in this sense is a group of aircraft using the same configuration.
    ///             There may be several fleets representing a particular model of aircraft, each showing a specific configuration
    ///             of the airframe.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Fleet 
    {
        /// <summary>The identifier of the fleet within the system.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The description for this fleet.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Fleet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fleet>(data);
        }
    
    }
    
    /// <summary>An aircraft in the system refers to an airframe with a particular tail number.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Aircraft 
    {
        /// <summary>The identifier of the aircraft within the system</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The description for this aircraft</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Each aircraft can be mapped to 0-N fleets in the system. 
        ///             Because a fleet represents a configuration for a airframe and those configurations can change over time,
        ///             it stands to reason that each aircraft can be mapped to more than one of them</summary>
        [Newtonsoft.Json.JsonProperty("fleetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> FleetIds { get; set; }
    
        /// <summary>Whether this aircraft is active in the system</summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }
    
        /// <summary>Whether this aircraft has been approved</summary>
        [Newtonsoft.Json.JsonProperty("isApproved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsApproved { get; set; }
    
        /// <summary>Whether this aircraft is enabled for FDW or not</summary>
        [Newtonsoft.Json.JsonProperty("fdwEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FdwEnabled { get; set; }
    
        /// <summary>Whether this aircraft is enabled for ODW or not</summary>
        [Newtonsoft.Json.JsonProperty("odwEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OdwEnabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Aircraft FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Aircraft>(data);
        }
    
    }
    
    /// <summary>A flight phase is a coarse division of a flight into sections, such as takeoff, climb and enroute.
    ///             The flight phases are used as inputs into some analytics.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FlightPhase 
    {
        /// <summary>The identifier of the flight phase within the system.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The description for this phase of flight.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FlightPhase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightPhase>(data);
        }
    
    }
    
    /// <summary>Encapsulates the definition of an airport.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Airport 
    {
        /// <summary>The identifier of the airport within the system.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The IATA code associated with this airport.</summary>
        [Newtonsoft.Json.JsonProperty("codeIata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeIata { get; set; }
    
        /// <summary>The ICAO code associated with this airport.</summary>
        [Newtonsoft.Json.JsonProperty("codeIcao", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeIcao { get; set; }
    
        /// <summary>The FAA / Regional code associated with this airport.</summary>
        [Newtonsoft.Json.JsonProperty("codeFaa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeFaa { get; set; }
    
        /// <summary>The preferred code to use for display. This is typically either the ICAO or FAA code, but can be overridden by the user.</summary>
        [Newtonsoft.Json.JsonProperty("codePreferred", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePreferred { get; set; }
    
        /// <summary>The name of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The city of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The country of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>The latitude of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The elevation of the airport, in feet.</summary>
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Elevation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Airport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Airport>(data);
        }
    
    }
    
    /// <summary>Represents a folder in the database tree of an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DatabaseGroup 
    {
        /// <summary>The unique string identifier for the database group</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The display name for the database group</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>An ordered listing of child database groups contained in this group</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseGroup> Groups { get; set; }
    
        /// <summary>An ordered listing of child databases contained in this group</summary>
        [Newtonsoft.Json.JsonProperty("databases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Database> Databases { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DatabaseGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DatabaseGroup>(data);
        }
    
    }
    
    /// <summary>Represents a database type exposed by an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Database 
    {
        /// <summary>The unique string identifier for the database</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>A plural display name for the database</summary>
        [Newtonsoft.Json.JsonProperty("pluralName", Required = Newtonsoft.Json.Required.Always)]
        public string PluralName { get; set; }
    
        /// <summary>A singular display name for the database</summary>
        [Newtonsoft.Json.JsonProperty("singularName", Required = Newtonsoft.Json.Required.Always)]
        public string SingularName { get; set; }
    
        /// <summary>The list of primary key fields for the database</summary>
        [Newtonsoft.Json.JsonProperty("primaryKeyFields", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<PrimaryKeyField> PrimaryKeyFields { get; set; } = new System.Collections.ObjectModel.ObservableCollection<PrimaryKeyField>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Database FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Database>(data);
        }
    
    }
    
    /// <summary>Represents a primary key field for a database type exposed by an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PrimaryKeyField 
    {
        /// <summary>The unique string identifier for the primary key</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>Suggested name for the primary key field when stored in a column format (if any)</summary>
        [Newtonsoft.Json.JsonProperty("suggestedColumnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuggestedColumnName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrimaryKeyField FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrimaryKeyField>(data);
        }
    
    }
    
    /// <summary>Represents a folder in the data source tree of an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldGroup 
    {
        /// <summary>The unique string identifier for the field group</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The display name for the field group</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>An ordered list of child groups contained in a field group</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FieldGroup> Groups { get; set; }
    
        /// <summary>An ordered list of child fields contained in a field group</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Field> Fields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGroup>(data);
        }
    
    }
    
    /// <summary>Represents an individual field that can be accessed within a data source.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Field 
    {
        /// <summary>The unique string identifier for the field</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The data type of the underlying data stored for the field</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldType Type { get; set; }
    
        /// <summary>The display name for the field</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Field FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Field>(data);
        }
    
    }
    
    /// <summary>Represents the options used to make up a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DbQuery 
    {
        /// <summary>An array specifying the fields to select and return as columns in the query results</summary>
        [Newtonsoft.Json.JsonProperty("select", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<SelectColumn> Select { get; set; } = new System.Collections.ObjectModel.ObservableCollection<SelectColumn>();
    
        /// <summary>An array specifying the fields by which to group aggregate operations. If not specified, no grouping
        ///             is performed</summary>
        [Newtonsoft.Json.JsonProperty("groupBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GroupByColumn> GroupBy { get; set; }
    
        /// <summary>An array specifying the selected columns by which to order result rows. Results are always ordered by the
        ///             results value, not by the display formatted value (configured to be returned by the format property). If
        ///             not specified, results are returned in default database ordering</summary>
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OrderByColumn> OrderBy { get; set; }
    
        /// <summary>A filter used to narrow the query results</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Filter Filter { get; set; }
    
        /// <summary>Value formatting that should be performed on results values before returning. If not specified, no results
        ///             formatting is performed. This can be overridden by specifying a value for the Format property of a SelectColumn</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DbQueryFormat? Format { get; set; }
    
        /// <summary>Whether to remove duplicate rows from query results <b>before formatting</b> the results. Using a format
        ///             value other than 'none' can reduce results precision, leading to cases where two distinct rows appear
        ///             equivalent after formatting is applied. Defaults to false if not specified</summary>
        [Newtonsoft.Json.JsonProperty("distinct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Distinct { get; set; }
    
        /// <summary>Identifies a subset of rows to return.
        ///             The subset is formed by selecting only the first N rows of the set, where N is a positive integer provided 
        ///             as the value of this property. If not specified, all rows are returned</summary>
        [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Top { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DbQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DbQuery>(data);
        }
    
    }
    
    /// <summary>Represents a column of data that can be selected in a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SelectColumn 
    {
        /// <summary>The unique string identifier of the field to select in a query</summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }
    
        /// <summary>An optional aggregate operation to perform on the column. Omission of this property results in no aggregate 
        ///             operation being performed</summary>
        [Newtonsoft.Json.JsonProperty("aggregate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SelectColumnAggregate? Aggregate { get; set; }
    
        /// <summary>Value formatting that should be performed on this field's value before returning.
        ///             This will override the query's display value</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SelectColumnFormat? Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SelectColumn FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SelectColumn>(data);
        }
    
    }
    
    /// <summary>Represents a column of data that can be used in a group-by clause of a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GroupByColumn 
    {
        /// <summary>The unique string identifier of the field to use in a group-by clause of a query</summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GroupByColumn FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupByColumn>(data);
        }
    
    }
    
    /// <summary>Represents a column of data that can be used in a order-by clause of a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrderByColumn 
    {
        /// <summary>The unique string identifier of the field to use in a order-by clause of a query</summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }
    
        /// <summary>An optional aggregate operation to perform on the column. Omission of this property results in no aggregate 
        ///             operation being used in the ordering</summary>
        [Newtonsoft.Json.JsonProperty("aggregate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderByColumnAggregate? Aggregate { get; set; }
    
        /// <summary>The ordering behavior to use for the column values. The omission of this property results in ascending order</summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderByColumnOrder? Order { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderByColumn FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderByColumn>(data);
        }
    
    }
    
    /// <summary>Represents the operations and arguments that can be used to filter a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Filter 
    {
        /// <summary>The unique string identifier of the operation to perform</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilterOperator Operator { get; set; }
    
        /// <summary>An ordered list of arguments to provide the operator. The requirements for the arguments depend on which 
        ///             operation is being performed</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<FilterArgument> Args { get; set; } = new System.Collections.ObjectModel.ObservableCollection<FilterArgument>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Filter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Filter>(data);
        }
    
    }
    
    /// <summary>Represents an argument in a filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FilterArgument 
    {
        /// <summary>The type of the filter argument, describing the role of the argument.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilterArgumentType Type { get; set; }
    
        /// <summary>The value represented by the filter argument.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; } = new object();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterArgument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterArgument>(data);
        }
    
    }
    
    /// <summary>Represents the tabular results of a data source query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DbQueryResult 
    {
        /// <summary>An ordered list of header column information, describing the fields included in the results and matching 
        ///             the order of columns in the resulting data rows</summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<DbQueryResultHeader> Header { get; set; } = new System.Collections.ObjectModel.ObservableCollection<DbQueryResultHeader>();
    
        /// <summary>An array of arrays representing the resulting data rows of a query. Each inner array represents a single 
        ///             results row</summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> Rows { get; set; } = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>>();
    
        /// <summary>Indicates whether the rows returned are a partial query result because the maximum amount of rows that can 
        ///             be returned has been reached.</summary>
        [Newtonsoft.Json.JsonProperty("isPartialResult", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPartialResult { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DbQueryResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DbQueryResult>(data);
        }
    
    }
    
    /// <summary>Represents a header column in data source query result.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DbQueryResultHeader 
    {
        /// <summary>The unique string identifier of the field associated with this column</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The user-friendly display name of the field associated with this column</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>The units of values of the field associated with this column. This value may be empty if not applicable</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DbQueryResultHeader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DbQueryResultHeader>(data);
        }
    
    }
    
    /// <summary>Passed back to the client when an async query is started. This contains query header
    ///             information, and a unique ID, with which the user can later read data for this query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AsyncQueryInfo 
    {
        /// <summary>The ID of the query; this will be used when making subsequent calls to the query APIs.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The number of seconds of inactivity after which an async query is eligible for automatic deletion.</summary>
        [Newtonsoft.Json.JsonProperty("inactivityTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InactivityTimeout { get; set; }
    
        /// <summary>An ordered list of header column information, describing the fields included in the results and matching 
        ///             the order of columns in the resulting data rows.</summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DbQueryResultHeader> Header { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AsyncQueryInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsyncQueryInfo>(data);
        }
    
    }
    
    /// <summary>Represents the tabular results of a data source query obtained from an async query.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AsyncQueryData 
    {
        /// <summary>An array of arrays representing the resulting data rows of a query. Each inner array represents a single results row</summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>> Rows { get; set; } = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<object>>();
    
        /// <summary>Whether the query has one or more rows in its result set at an index greater than the last row returned</summary>
        [Newtonsoft.Json.JsonProperty("hasMoreRows", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreRows { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AsyncQueryData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AsyncQueryData>(data);
        }
    
    }
    
    /// <summary>Represents the options used to make up a data entity creation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Create 
    {
        /// <summary>An array specifying the fields to set during the creation (and their values). This should always include primary key fields.</summary>
        [Newtonsoft.Json.JsonProperty("createColumns", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<Column>> CreateColumns { get; set; } = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<Column>>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Create FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Create>(data);
        }
    
    }
    
    /// <summary>Represents a column to be modified.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Column 
    {
        /// <summary>The unique string identifier of the field to modify.</summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        public string FieldId { get; set; }
    
        /// <summary>The value for the field.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public object Value { get; set; } = new object();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Column FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Column>(data);
        }
    
    }
    
    /// <summary>Represents the result of an update.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateResult 
    {
        /// <summary>The number of rows added by the creation.</summary>
        [Newtonsoft.Json.JsonProperty("rowsAdded", Required = Newtonsoft.Json.Required.Always)]
        public int RowsAdded { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateResult>(data);
        }
    
    }
    
    /// <summary>Represents the options used to make up an update.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Update 
    {
        /// <summary>An array specifying the fields to update (and their values).</summary>
        [Newtonsoft.Json.JsonProperty("updateColumns", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<Column> UpdateColumns { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Column>();
    
        /// <summary>A filter used to narrow the update results.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Filter Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Update FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Update>(data);
        }
    
    }
    
    /// <summary>Represents the result of an update.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdateResult 
    {
        /// <summary>The number of rows affected by the update.</summary>
        [Newtonsoft.Json.JsonProperty("rowsUpdated", Required = Newtonsoft.Json.Required.Always)]
        public int RowsUpdated { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateResult>(data);
        }
    
    }
    
    /// <summary>Represents the options used to make up a data entity deletion.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Delete 
    {
        /// <summary>A collection of arrays (one for each data entity being deleted) which contains the primary
        ///             key column and value pairs for the data entity to delete.</summary>
        [Newtonsoft.Json.JsonProperty("deleteColumns", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<Column>> DeleteColumns { get; set; } = new System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<Column>>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Delete FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Delete>(data);
        }
    
    }
    
    /// <summary>Represents the result of an update.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DeleteResult 
    {
        /// <summary>The number of rows deleted</summary>
        [Newtonsoft.Json.JsonProperty("rowsDeleted", Required = Newtonsoft.Json.Required.Always)]
        public int RowsDeleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteResult>(data);
        }
    
    }
    
    /// <summary>Encapsulates all the profile results for a flight.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResults 
    {
        /// <summary>The numeric version of the profile that was processed to generate the results. This
        ///             corresponds to an index in the array of version history entries for the profile</summary>
        [Newtonsoft.Json.JsonProperty("profileVersion", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileVersion { get; set; }
    
        /// <summary>Whether automatic parameter filtering was enabled when the profile was processed</summary>
        [Newtonsoft.Json.JsonProperty("parameterFiltering", Required = Newtonsoft.Json.Required.Always)]
        public bool ParameterFiltering { get; set; }
    
        /// <summary>The top-level (non-event-based) measurements</summary>
        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> Measurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The top-level (non-event-based) timepoints</summary>
        [Newtonsoft.Json.JsonProperty("timepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> Timepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The events detected in the flight</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultsEventRecord> Events { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultsEventRecord>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResults>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about a profile results value (measurement or timepoint).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultValue 
    {
        /// <summary>The id of the item in the profile.</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        public int ItemId { get; set; }
    
        /// <summary>The computed data value for the given item</summary>
        [Newtonsoft.Json.JsonProperty("dataValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultValue>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about an event result stored in the database.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultsEventRecord 
    {
        /// <summary>The unique id of the event in the database</summary>
        [Newtonsoft.Json.JsonProperty("recordNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RecordNumber { get; set; }
    
        /// <summary>The unique id of the event definition that generated this event</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        public int EventType { get; set; }
    
        /// <summary>The phase of flight where the event occurred (a value from the EMS POF list)</summary>
        [Newtonsoft.Json.JsonProperty("phaseOfFlight", Required = Newtonsoft.Json.Required.Always)]
        public int PhaseOfFlight { get; set; }
    
        /// <summary>The event severity (a value from the EMS Severity list)</summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Always)]
        public int Severity { get; set; }
    
        /// <summary>The status of the event (a value from the EMS Status list). Typically this is defaulted to
        ///             0 for new events, but in some data-merge scenarios we need to import a non-default value
        ///             from a remote system</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        /// <summary>The false positive value for the event (a value from the EMS False Positive list).
        ///             Typically this is defaulted to 0 for new events, but in some data-merge scenarios we
        ///             need to import a non-default value from a remote system</summary>
        [Newtonsoft.Json.JsonProperty("falsePositive", Required = Newtonsoft.Json.Required.Always)]
        public int FalsePositive { get; set; }
    
        /// <summary>The starting offset for the event</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Always)]
        public double StartTime { get; set; }
    
        /// <summary>The ending offset for the event</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Always)]
        public double EndTime { get; set; }
    
        /// <summary>The global event measurements (defined for all events)</summary>
        [Newtonsoft.Json.JsonProperty("globalMeasurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> GlobalMeasurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The global event timepoints (defined for all events)</summary>
        [Newtonsoft.Json.JsonProperty("globalTimepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> GlobalTimepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The event-specific measurements (different for each event type)</summary>
        [Newtonsoft.Json.JsonProperty("localMeasurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> LocalMeasurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The event-specific timepoints (different for each event type)</summary>
        [Newtonsoft.Json.JsonProperty("localTimepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue> LocalTimepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue>();
    
        /// <summary>The event comments. Usually this is empty, but it's required for some data-merge
        ///             scenarios.</summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultComment> Comments { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultComment>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultsEventRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultsEventRecord>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about a comment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultComment 
    {
        /// <summary>The user that wrote the comment</summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        public string User { get; set; }
    
        /// <summary>The date and time that the comment was added (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Date { get; set; }
    
        /// <summary>The text of the comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Always)]
        public string Comment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultComment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultComment>(data);
        }
    
    }
    
    /// <summary>Represents an APM (Automated Parameter Measurement) profile in an EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EmsProfile 
    {
        /// <summary>The local identifier for a profile</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileId { get; set; }
    
        /// <summary>The unique identifier of a profile in the system</summary>
        [Newtonsoft.Json.JsonProperty("profileGuid", Required = Newtonsoft.Json.Required.Always)]
        public string ProfileGuid { get; set; }
    
        /// <summary>The name of the profile</summary>
        [Newtonsoft.Json.JsonProperty("profileName", Required = Newtonsoft.Json.Required.Always)]
        public string ProfileName { get; set; }
    
        /// <summary>Flag for if a profile is a library profile</summary>
        [Newtonsoft.Json.JsonProperty("library", Required = Newtonsoft.Json.Required.Always)]
        public bool Library { get; set; }
    
        /// <summary>The version of the profile</summary>
        [Newtonsoft.Json.JsonProperty("currentVersion", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentVersion { get; set; }
    
        /// <summary>Path to the profile's location</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmsProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmsProfile>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EmsProfileGlossary 
    {
        /// <summary>The version of the EMS glossary the results were generated from.</summary>
        [Newtonsoft.Json.JsonProperty("glossaryVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlossaryVersion { get; set; }
    
        /// <summary>The local identifier of the profile</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProfileId { get; set; }
    
        /// <summary>The unique GUID of the profile in the system</summary>
        [Newtonsoft.Json.JsonProperty("profileGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileGuid { get; set; }
    
        /// <summary>The version of the associated profile</summary>
        [Newtonsoft.Json.JsonProperty("currentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentVersion { get; set; }
    
        /// <summary>The GUID identifier for the version of this profile.</summary>
        [Newtonsoft.Json.JsonProperty("currentVersionGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentVersionGuid { get; set; }
    
        /// <summary>Array of entries in this glossary.</summary>
        [Newtonsoft.Json.JsonProperty("glossaryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GlossaryItem> GlossaryItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmsProfileGlossary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmsProfileGlossary>(data);
        }
    
    }
    
    /// <summary>Represents a single entry for an item in a profile glossary.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlossaryItem 
    {
        /// <summary>A character representing a profile glossary entries record type.</summary>
        [Newtonsoft.Json.JsonProperty("recordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordType { get; set; }
    
        /// <summary>A character representing the scope of this entry.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }
    
        /// <summary>A unique integer id for this item.</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemId { get; set; }
    
        /// <summary>The event type id of this item. This is only available for valid event types.</summary>
        [Newtonsoft.Json.JsonProperty("eventTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventTypeId { get; set; }
    
        /// <summary>A character representing the data type of this entry.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataType { get; set; }
    
        /// <summary>A GUID defining this item's logical id.</summary>
        [Newtonsoft.Json.JsonProperty("logicalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalId { get; set; }
    
        /// <summary>The name provided for this item.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>An optional unit provided for this item.</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        /// <summary>The item type of the first associated item.</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstAssociatedItemType { get; set; }
    
        /// <summary>The scope of the first associated item.</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstAssociatedItemScope { get; set; }
    
        /// <summary>The item id of the first associated item.</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirstAssociatedItemId { get; set; }
    
        /// <summary>The item type of the second associated item.</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondAssociatedItemType { get; set; }
    
        /// <summary>The scope of the second associated item.</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondAssociatedItemScope { get; set; }
    
        /// <summary>The item id of the second associated item.</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecondAssociatedItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlossaryItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlossaryItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EmsSystem 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dirAdi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirAdi { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dirCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirCollection { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmsSystem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmsSystem>(data);
        }
    
    }
    
    /// <summary>Information about a single airport.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationAirport 
    {
        /// <summary>The unique identifier for this airport.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The name of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The ATA (FAA) code is the US-specific 3-letter identifier (e.g. ORD)</summary>
        [Newtonsoft.Json.JsonProperty("ataCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AtaCode { get; set; }
    
        /// <summary>The city of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The country of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>The airport code as it should be displayed by EMS apps.</summary>
        [Newtonsoft.Json.JsonProperty("emsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmsCode { get; set; }
    
        /// <summary>The ICAO code is the international 4-letter identifier (e.g. KORD).</summary>
        [Newtonsoft.Json.JsonProperty("icaoCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IcaoCode { get; set; }
    
        /// <summary>The latitude of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The altitude of the airport</summary>
        [Newtonsoft.Json.JsonProperty("altitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Altitude { get; set; }
    
        /// <summary>The magnetic variation of the airport.</summary>
        [Newtonsoft.Json.JsonProperty("magneticVariation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MagneticVariation { get; set; }
    
        /// <summary>The type of airport (e.g. civil, military)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationAirport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationAirport>(data);
        }
    
    }
    
    /// <summary>Various pieces of information associated with a runway.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationRunway 
    {
        /// <summary>The unique identifier for the runway.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The unique identifier of the airport for this runway.</summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirportId { get; set; }
    
        /// <summary>A text value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("string", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string String { get; set; }
    
        /// <summary>The length of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        /// <summary>The width of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        /// <summary>The dafif id of the reciprocal runway (i.e. landing in the opposite direction on this runway).</summary>
        [Newtonsoft.Json.JsonProperty("oppositeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OppositeId { get; set; }
    
        /// <summary>Whether the runway is parallel.</summary>
        [Newtonsoft.Json.JsonProperty("isParallel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsParallel { get; set; }
    
        /// <summary>The true heading of the runway</summary>
        [Newtonsoft.Json.JsonProperty("headingTrue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HeadingTrue { get; set; }
    
        /// <summary>The magnetic heading of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("headingMagnetic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HeadingMagnetic { get; set; }
    
        /// <summary>The takeoff distance of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("takeoffDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TakeoffDistance { get; set; }
    
        /// <summary>The landing distance of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("landingDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LandingDistance { get; set; }
    
        /// <summary>The runway's starting latitude.</summary>
        [Newtonsoft.Json.JsonProperty("latitudeStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LatitudeStart { get; set; }
    
        /// <summary>The runway's ending latitude.</summary>
        [Newtonsoft.Json.JsonProperty("latitudeEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LatitudeEnd { get; set; }
    
        /// <summary>The runway's starting longitude.</summary>
        [Newtonsoft.Json.JsonProperty("longitudeStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LongitudeStart { get; set; }
    
        /// <summary>The runway's ending longitude.</summary>
        [Newtonsoft.Json.JsonProperty("longitudeEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LongitudeEnd { get; set; }
    
        /// <summary>The runway's starting altitude.</summary>
        [Newtonsoft.Json.JsonProperty("altitudeStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AltitudeStart { get; set; }
    
        /// <summary>The runway's ending altitude.</summary>
        [Newtonsoft.Json.JsonProperty("altitudeEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AltitudeEnd { get; set; }
    
        /// <summary>The slope of the runway.</summary>
        [Newtonsoft.Json.JsonProperty("slope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slope { get; set; }
    
        /// <summary>The threshold displaced value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdDisplaced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdDisplaced { get; set; }
    
        /// <summary>The threshold latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdLatitude { get; set; }
    
        /// <summary>The threshold longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdLongitude { get; set; }
    
        /// <summary>The threshold elevation value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdElevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdElevation { get; set; }
    
        /// <summary>The threshold crossheight value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdCrossHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdCrossHeight { get; set; }
    
        /// <summary>The threshold to glideslope distance associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdToGlideslopeDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThresholdToGlideslopeDistance { get; set; }
    
        /// <summary>Bitflags indicating the available lighting for the runway.</summary>
        [Newtonsoft.Json.JsonProperty("lighting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lighting { get; set; }
    
        /// <summary>The glideslope angle value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("glideslopeAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GlideslopeAngle { get; set; }
    
        /// <summary>The glideslope latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("glideslopeLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GlideslopeLatitude { get; set; }
    
        /// <summary>The glideslope longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("glideslopeLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GlideslopeLongitude { get; set; }
    
        /// <summary>The glideslope altitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("glideslopeAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GlideslopeAltitude { get; set; }
    
        /// <summary>The localizer width value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("localizerWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LocalizerWidth { get; set; }
    
        /// <summary>The navaid id of the localizer navaid.</summary>
        [Newtonsoft.Json.JsonProperty("localizerNavaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocalizerNavaid { get; set; }
    
        /// <summary>The localizer frequency value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("localizerFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LocalizerFrequency { get; set; }
    
        /// <summary>The backcourse localizer frequency value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("backcourseLocalizerFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BackcourseLocalizerFrequency { get; set; }
    
        /// <summary>The magnetic heading to fly the ILS.</summary>
        [Newtonsoft.Json.JsonProperty("ilsBearingCourse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IlsBearingCourse { get; set; }
    
        /// <summary>The navid id of the localizer dme.</summary>
        [Newtonsoft.Json.JsonProperty("dmeNavaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DmeNavaid { get; set; }
    
        /// <summary>The DME bias for the runway (the distance in NM from the DME to the landing threshold).</summary>
        [Newtonsoft.Json.JsonProperty("dmeBias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DmeBias { get; set; }
    
        /// <summary>The inner marker latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("innerMarkerLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InnerMarkerLatitude { get; set; }
    
        /// <summary>The inner marker longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("innerMarkerLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InnerMarkerLongitude { get; set; }
    
        /// <summary>The inner marker altitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("innerMarkerAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InnerMarkerAltitude { get; set; }
    
        /// <summary>The navaid id of the middle marker, if any.</summary>
        [Newtonsoft.Json.JsonProperty("middleMarkerNavaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MiddleMarkerNavaid { get; set; }
    
        /// <summary>The middle marker latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("middleMarkerLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MiddleMarkerLatitude { get; set; }
    
        /// <summary>The middle marker longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("middleMarkerLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MiddleMarkerLongitude { get; set; }
    
        /// <summary>The middle marker altitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("middleMarkerAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MiddleMarkerAltitude { get; set; }
    
        /// <summary>The navaid id of the outer marker, if any.</summary>
        [Newtonsoft.Json.JsonProperty("outerMarkerNavaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OuterMarkerNavaid { get; set; }
    
        /// <summary>The outer marker latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("outerMarkerLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OuterMarkerLatitude { get; set; }
    
        /// <summary>The outer marker longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("outerMarkerLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OuterMarkerLongitude { get; set; }
    
        /// <summary>The outer marker altitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("outerMarkerAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OuterMarkerAltitude { get; set; }
    
        /// <summary>The navaid id of the compass locator, if any.</summary>
        [Newtonsoft.Json.JsonProperty("locatorNavaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocatorNavaid { get; set; }
    
        /// <summary>The locator latitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("locatorLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LocatorLatitude { get; set; }
    
        /// <summary>The locator longitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("locatorLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LocatorLongitude { get; set; }
    
        /// <summary>The locator altitude value associated with the runway.</summary>
        [Newtonsoft.Json.JsonProperty("locatorAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LocatorAltitude { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationRunway FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationRunway>(data);
        }
    
    }
    
    /// <summary>Various pieces of information associated with a procedure.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationProcedure 
    {
        /// <summary>The unique identiifer for this procedure.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>A text value representing the cycle date of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("cycleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CycleDate { get; set; }
    
        /// <summary>The emergency safe altitude of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("emergencySafeAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmergencySafeAltitude { get; set; }
    
        /// <summary>A text identifier of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("string", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string String { get; set; }
    
        /// <summary>The transition altitude of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("transitionalAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransitionalAltitude { get; set; }
    
        /// <summary>The transition level of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("transitionalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TransitionalLevel { get; set; }
    
        /// <summary>The type of the procedure.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationProcedure>(data);
        }
    
    }
    
    /// <summary>Various pieces of information associated with a procedure segment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationProcedureSegment 
    {
        /// <summary>The segment type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>The procedure segment id.</summary>
        [Newtonsoft.Json.JsonProperty("transitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionId { get; set; }
    
        /// <summary>The procedure segment sequence number.</summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SequenceNumber { get; set; }
    
        /// <summary>The procedure segment</summary>
        [Newtonsoft.Json.JsonProperty("trackCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackCode { get; set; }
    
        /// <summary>The procedure segment waypoint id.</summary>
        [Newtonsoft.Json.JsonProperty("waypointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WaypointId { get; set; }
    
        /// <summary>The procedure segment waypoint description codes.</summary>
        [Newtonsoft.Json.JsonProperty("waypointDescCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> WaypointDescCodes { get; set; }
    
        /// <summary>The bearing to the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("waypointBearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WaypointBearing { get; set; }
    
        /// <summary>The distance to the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("waypointDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WaypointDistance { get; set; }
    
        /// <summary>The navaids referenced by this segment.</summary>
        [Newtonsoft.Json.JsonProperty("navaids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<NavigationProcedureSegmentNavaid> Navaids { get; set; }
    
        /// <summary>The procedure segment turn direction.</summary>
        [Newtonsoft.Json.JsonProperty("turnDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TurnDirection { get; set; }
    
        /// <summary>The procedure segment altitude description.</summary>
        [Newtonsoft.Json.JsonProperty("altitudeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltitudeDescription { get; set; }
    
        /// <summary>The procedure segment altitude 1.</summary>
        [Newtonsoft.Json.JsonProperty("altitude1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Altitude1 { get; set; }
    
        /// <summary>The procedure segment altitude 2.</summary>
        [Newtonsoft.Json.JsonProperty("altitude2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Altitude2 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationProcedureSegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationProcedureSegment>(data);
        }
    
    }
    
    /// <summary>A single navaid associated with a procedure segment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationProcedureSegmentNavaid 
    {
        /// <summary>The ID of the navaid referenced by this segment.</summary>
        [Newtonsoft.Json.JsonProperty("navaidId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NavaidId { get; set; }
    
        /// <summary>The bearing to the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("bearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bearing { get; set; }
    
        /// <summary>The distance to the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationProcedureSegmentNavaid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationProcedureSegmentNavaid>(data);
        }
    
    }
    
    /// <summary>Various pieces of information associated with a waypoint.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationWaypoint 
    {
        /// <summary>The unique identifier of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The airport id for the waypoint, if any.</summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirportId { get; set; }
    
        /// <summary>The country code of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The type of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>The name of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The ICAO code of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("icaoCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IcaoCode { get; set; }
    
        /// <summary>The usage code of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("usageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsageCode { get; set; }
    
        /// <summary>The latitude of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The magnetic variance from true north at the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("magneticVariance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MagneticVariance { get; set; }
    
        /// <summary>The id of the associated naviad, if any.</summary>
        [Newtonsoft.Json.JsonProperty("navaidId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NavaidId { get; set; }
    
        /// <summary>Flag indicating whether or not the waypoint is colocated with the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("colocationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ColocationFlag { get; set; }
    
        /// <summary>The magnetic bearing from the navaid to the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("navaidBearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NavaidBearing { get; set; }
    
        /// <summary>The distance from the navaid to the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("navaidDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NavaidDistance { get; set; }
    
        /// <summary>The DAFIF text identifier of the waypoint.</summary>
        [Newtonsoft.Json.JsonProperty("dafifId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DafifId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationWaypoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationWaypoint>(data);
        }
    
    }
    
    /// <summary>Various pieces of information associated with a waypoint.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NavigationNavaid 
    {
        /// <summary>The unique identifier of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The radio callsign of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("callsign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Callsign { get; set; }
    
        /// <summary>The navaid type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>The navaid's country code.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The navaid's state code.</summary>
        [Newtonsoft.Json.JsonProperty("stateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StateCode { get; set; }
    
        /// <summary>The official name of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The radio frequency of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Frequency { get; set; }
    
        /// <summary>The airspace structure in which the navaid is utilized (e.g. high, low, terminal, etc.)</summary>
        [Newtonsoft.Json.JsonProperty("usageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsageCode { get; set; }
    
        /// <summary>The navaid's radio channel.</summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }
    
        /// <summary>The radio class code of the navaid (e.g. low-power NDB, high-power NDB, etc)</summary>
        [Newtonsoft.Json.JsonProperty("radioClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RadioClassCode { get; set; }
    
        /// <summary>The effective range of the navaid in nautical miles.</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Range { get; set; }
    
        /// <summary>The latitude of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude of the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The navaid's elevation.</summary>
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Elevation { get; set; }
    
        /// <summary>The magnetic varation from true north at the navaid.</summary>
        [Newtonsoft.Json.JsonProperty("magneticVariance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MagneticVariance { get; set; }
    
        /// <summary>The latitude of the DME equipment colocated with the navaid, if any.</summary>
        [Newtonsoft.Json.JsonProperty("dmeLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DmeLatitude { get; set; }
    
        /// <summary>The longitude of the DME equipment colocated with the navaid, if any.</summary>
        [Newtonsoft.Json.JsonProperty("dmeLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DmeLongitude { get; set; }
    
        /// <summary>The elevation of the DME equipment colocated with the navaid, if any.</summary>
        [Newtonsoft.Json.JsonProperty("dmeElevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DmeElevation { get; set; }
    
        /// <summary>The airport code of the associated airport, if any.</summary>
        [Newtonsoft.Json.JsonProperty("associatedAirport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociatedAirport { get; set; }
    
        /// <summary>The status of the navaid (e.g. in service, out of service, etc.)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NavigationNavaid FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NavigationNavaid>(data);
        }
    
    }
    
    /// <summary>A container for parameter sets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterSetGroup 
    {
        /// <summary>The name of the group.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The id of the group. This should be a relative path.</summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }
    
        /// <summary>An array of groups contained by this group.</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParameterSetGroup> Groups { get; set; }
    
        /// <summary>An array of parameter sets contained by this group.</summary>
        [Newtonsoft.Json.JsonProperty("sets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParameterSet> Sets { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterSetGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterSetGroup>(data);
        }
    
    }
    
    /// <summary>Encapsulates the some data defining a ParameterSet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterSet 
    {
        /// <summary>The name of the ParameterSet.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>An optional description of the ParameterSet.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>An array of the parameters contained in the ParameterSet.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParameterSetItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterSet>(data);
        }
    
    }
    
    /// <summary>A container for parameter sets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterSetItem 
    {
        /// <summary>The index of the chart that this analytic info belongs to, or null if no index specified.</summary>
        [Newtonsoft.Json.JsonProperty("chartIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChartIndex { get; set; }
    
        /// <summary>The analytic that is represented by this parameter set item.</summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnalyticInfo Parameter { get; set; }
    
        /// <summary>The custom name the user specified for the item, or null if not-specified.</summary>
        [Newtonsoft.Json.JsonProperty("customName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomName { get; set; }
    
        /// <summary>The color to use for the line in hexadecimal color specification "#RRGGBB", or null if no color specified.</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }
    
        /// <summary>Optional override for the vertical scale for a parameter.</summary>
        [Newtonsoft.Json.JsonProperty("customRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataRange CustomRange { get; set; }
    
        /// <summary>Optional override for the number of digits to display.</summary>
        [Newtonsoft.Json.JsonProperty("customDigitsAfterDecimal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomDigitsAfterDecimal { get; set; }
    
        /// <summary>Optional value from 1 to 5 for the width of the line.</summary>
        [Newtonsoft.Json.JsonProperty("lineWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineWidth { get; set; }
    
        /// <summary>Optional value specifying whether the parrmeter should display shapes to indicate the sampled values.</summary>
        [Newtonsoft.Json.JsonProperty("displaySampleMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplaySampleMarker { get; set; }
    
        /// <summary>If set, describes the shape to use for the sampled values.
        ///             Possible values: [Square, Circle, Triangle, InvertedTriangle, Cross, Star]</summary>
        [Newtonsoft.Json.JsonProperty("sampleMarkerShape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SampleMarkerShape { get; set; }
    
        /// <summary>If set, describes the line style to use when drawing.
        ///             Possible values: [Dash, Dot, DashDot, DashDotDot, Solid]</summary>
        [Newtonsoft.Json.JsonProperty("lineStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineStyle { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParameterSetItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterSetItem>(data);
        }
    
    }
    
    /// <summary>Encapsulates all the profile results for a flight.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResults2 
    {
        /// <summary>The integer version of the profile that was processed to generate the results,
        ///             corresponding to an index in the array of version history entries for the profile</summary>
        [Newtonsoft.Json.JsonProperty("profileVersion", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileVersion { get; set; }
    
        /// <summary>Indicates whether automatic parameter filtering was enabled when the profile was processed</summary>
        [Newtonsoft.Json.JsonProperty("parameterFiltering", Required = Newtonsoft.Json.Required.Always)]
        public bool ParameterFiltering { get; set; }
    
        /// <summary>The top-level, non-event-based, measurement results</summary>
        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> Measurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The top-level, non-event-based, timepoint results</summary>
        [Newtonsoft.Json.JsonProperty("timepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> Timepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The event results detected in the flight</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultsEventRecord2> Events { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultsEventRecord2>();
    
        /// <summary>The processing information of the flight</summary>
        [Newtonsoft.Json.JsonProperty("processingInformation", Required = Newtonsoft.Json.Required.Always)]
        public ProcessingInformation ProcessingInformation { get; set; } = new ProcessingInformation();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResults2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResults2>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about a profile results value (measurement or timepoint).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultValue2 
    {
        /// <summary>The integer ID of the result value in the profile</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        public int ItemId { get; set; }
    
        /// <summary>The computed data value for the result</summary>
        [Newtonsoft.Json.JsonProperty("dataValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DataValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultValue2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultValue2>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about an event result stored in the database.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultsEventRecord2 
    {
        /// <summary>The unique integer ID of the event in the database</summary>
        [Newtonsoft.Json.JsonProperty("recordNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RecordNumber { get; set; }
    
        /// <summary>The unique ID of the event definition that generated the event</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        public int EventType { get; set; }
    
        /// <summary>The phase of flight where the event occurred (which is a value from the EMS phase of flight list)</summary>
        [Newtonsoft.Json.JsonProperty("phaseOfFlight", Required = Newtonsoft.Json.Required.Always)]
        public int PhaseOfFlight { get; set; }
    
        /// <summary>The event severity (which is a value from the EMS severity list)</summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Always)]
        public int Severity { get; set; }
    
        /// <summary>The status of the event (which is a value from the EMS status list). Typically this defaults to
        ///             0 for new events, but in some data-merge scenarios we need to import a non-default value
        ///             from a remote system</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        /// <summary>The false positive value for the event (a value from the EMS false positive list).
        ///             Typically this defaults to 0 for new events, but in some data-merge scenarios we
        ///             need to import a non-default value from a remote system</summary>
        [Newtonsoft.Json.JsonProperty("falsePositive", Required = Newtonsoft.Json.Required.Always)]
        public int FalsePositive { get; set; }
    
        /// <summary>The start offset for the event</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Always)]
        public double StartTime { get; set; }
    
        /// <summary>The end offset for the event</summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Always)]
        public double EndTime { get; set; }
    
        /// <summary>The global event measurement results (defined for all events)</summary>
        [Newtonsoft.Json.JsonProperty("globalMeasurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> GlobalMeasurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The global event timepoint results (defined for all events)</summary>
        [Newtonsoft.Json.JsonProperty("globalTimepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> GlobalTimepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The event-specific measurement results (different for each event type)</summary>
        [Newtonsoft.Json.JsonProperty("localMeasurements", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> LocalMeasurements { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The event-specific timepoint results (different for each event type)</summary>
        [Newtonsoft.Json.JsonProperty("localTimepoints", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2> LocalTimepoints { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultValue2>();
    
        /// <summary>The event comments. Usually this is empty, but it's required for some data-merge
        ///             scenarios.</summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileResultComment2> Comments { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileResultComment2>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultsEventRecord2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultsEventRecord2>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about processing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProcessingInformation 
    {
        /// <summary>The state of the processing.</summary>
        [Newtonsoft.Json.JsonProperty("processingState", Required = Newtonsoft.Json.Required.Always)]
        public string ProcessingState { get; set; }
    
        /// <summary>The date and time that the processing occured (UTC).</summary>
        [Newtonsoft.Json.JsonProperty("processedDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ProcessedDate { get; set; }
    
        /// <summary>The retry count.</summary>
        [Newtonsoft.Json.JsonProperty("retryCount", Required = Newtonsoft.Json.Required.Always)]
        public int RetryCount { get; set; }
    
        /// <summary>The worker cpu time of the processing in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("workerCpuTime", Required = Newtonsoft.Json.Required.Always)]
        public double WorkerCpuTime { get; set; }
    
        /// <summary>The worker wall time of the processing in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("workerWallTime", Required = Newtonsoft.Json.Required.Always)]
        public double WorkerWallTime { get; set; }
    
        /// <summary>The total wall time of the processing in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("totalWallTime", Required = Newtonsoft.Json.Required.Always)]
        public double TotalWallTime { get; set; }
    
        /// <summary>Whether it is a failure.</summary>
        [Newtonsoft.Json.JsonProperty("isFailure", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFailure { get; set; }
    
        /// <summary>The failure type.</summary>
        [Newtonsoft.Json.JsonProperty("failureType", Required = Newtonsoft.Json.Required.Always)]
        public int FailureType { get; set; }
    
        /// <summary>The failure name.</summary>
        [Newtonsoft.Json.JsonProperty("failureName", Required = Newtonsoft.Json.Required.Always)]
        public string FailureName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProcessingInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProcessingInformation>(data);
        }
    
    }
    
    /// <summary>Encapsulates information about a comment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileResultComment2 
    {
        /// <summary>The user associated with the comment</summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        public string User { get; set; }
    
        /// <summary>The date and time the comment was added (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Date { get; set; }
    
        /// <summary>The text of the comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Always)]
        public string Comment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileResultComment2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileResultComment2>(data);
        }
    
    }
    
    /// <summary>Represents a folder in the profile tree of an EMS installation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileGroup 
    {
        /// <summary>The globally unique ID for the profile group</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The display name of the profile group</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>The optional description that briefly describes the profile group</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>An ordered listing of child profile groups contained in this group</summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileGroup> Groups { get; set; }
    
        /// <summary>An ordered listing of child profiles contained in this group</summary>
        [Newtonsoft.Json.JsonProperty("profiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Profile> Profiles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileGroup>(data);
        }
    
    }
    
    /// <summary>Represents an APM (Automated Parameter Measurement) profile in an EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Profile 
    {
        /// <summary>The local integer identifier for the profile</summary>
        [Newtonsoft.Json.JsonProperty("localId", Required = Newtonsoft.Json.Required.Always)]
        public int LocalId { get; set; }
    
        /// <summary>The globally unique identifier of the profile</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public string Id { get; set; }
    
        /// <summary>The display name of the profile</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>The current location of this profile in the tree as a root-first
        ///             array of profile groups (only IDs and Names will be filled out)</summary>
        [Newtonsoft.Json.JsonProperty("treeLocation", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<ProfileGroup> TreeLocation { get; set; } = new System.Collections.ObjectModel.ObservableCollection<ProfileGroup>();
    
        /// <summary>Indicates whether the profile is a "library" profile</summary>
        [Newtonsoft.Json.JsonProperty("library", Required = Newtonsoft.Json.Required.Always)]
        public bool Library { get; set; }
    
        /// <summary>The current integer version of the profile</summary>
        [Newtonsoft.Json.JsonProperty("currentVersion", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Profile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Profile>(data);
        }
    
    }
    
    /// <summary>A glossary for a specific profile. This describes the type of items found in a profile.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileGlossary 
    {
        /// <summary>The integer version of the glossary</summary>
        [Newtonsoft.Json.JsonProperty("glossaryVersion", Required = Newtonsoft.Json.Required.Always)]
        public int GlossaryVersion { get; set; }
    
        /// <summary>The local integer identifier of the associated profile</summary>
        [Newtonsoft.Json.JsonProperty("profileLocalId", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileLocalId { get; set; }
    
        /// <summary>The globally unique identifier of the associated profile</summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Always)]
        public string ProfileId { get; set; }
    
        /// <summary>The integer version of the associated profile</summary>
        [Newtonsoft.Json.JsonProperty("currentVersion", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentVersion { get; set; }
    
        /// <summary>The globally unique identifier for the version of the associated profile</summary>
        [Newtonsoft.Json.JsonProperty("currentVersionGuid", Required = Newtonsoft.Json.Required.Always)]
        public string CurrentVersionGuid { get; set; }
    
        /// <summary>A list of all entries contained in the glossary</summary>
        [Newtonsoft.Json.JsonProperty("glossaryItems", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<GlossaryItem2> GlossaryItems { get; set; } = new System.Collections.ObjectModel.ObservableCollection<GlossaryItem2>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProfileGlossary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileGlossary>(data);
        }
    
    }
    
    /// <summary>Represents a single entry for an item in a profile glossary.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlossaryItem2 
    {
        /// <summary>A value representing a profile glossary entries record type</summary>
        [Newtonsoft.Json.JsonProperty("recordType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2RecordType RecordType { get; set; }
    
        /// <summary>A value representing the scope of the item</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2Scope Scope { get; set; }
    
        /// <summary>A unique integer ID for the item</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        public int ItemId { get; set; }
    
        /// <summary>The event type ID of the item - this is only available for valid event types</summary>
        [Newtonsoft.Json.JsonProperty("eventTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventTypeId { get; set; }
    
        /// <summary>A value representing the data type of the entry</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2DataType? DataType { get; set; }
    
        /// <summary>A unique ID defining the item's logical ID</summary>
        [Newtonsoft.Json.JsonProperty("logicalId", Required = Newtonsoft.Json.Required.Always)]
        public string LogicalId { get; set; }
    
        /// <summary>The display name of the item</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>An optional unit describing how the type of data represented by the item</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        /// <summary>The item type of the first associated item</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2FirstAssociatedItemType? FirstAssociatedItemType { get; set; }
    
        /// <summary>The scope of the first associated item</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2FirstAssociatedItemScope? FirstAssociatedItemScope { get; set; }
    
        /// <summary>The item id of the first associated item</summary>
        [Newtonsoft.Json.JsonProperty("firstAssociatedItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FirstAssociatedItemId { get; set; }
    
        /// <summary>The item type of the second associated item</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2SecondAssociatedItemType? SecondAssociatedItemType { get; set; }
    
        /// <summary>The scope of the second associated item</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlossaryItem2SecondAssociatedItemScope? SecondAssociatedItemScope { get; set; }
    
        /// <summary>The item id of the second associated item</summary>
        [Newtonsoft.Json.JsonProperty("secondAssociatedItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecondAssociatedItemId { get; set; }
    
        /// <summary>A flag describing if a measurement is saved to the database</summary>
        [Newtonsoft.Json.JsonProperty("isSavedToDatabase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSavedToDatabase { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlossaryItem2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlossaryItem2>(data);
        }
    
    }
    
    /// <summary>Represents an APM event definition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Event 
    {
        /// <summary>The definition ID of this event</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>The name of the event</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>Comments associated with this event</summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Always)]
        public string Comments { get; set; }
    
        /// <summary>The parameter set associated with the event if any</summary>
        [Newtonsoft.Json.JsonProperty("parameterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParameterSet ParameterSet { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    
    }
    
    /// <summary>Represents information that can be used to access Tableau content related to an associated Tableau server.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Trusted 
    {
        /// <summary>The URL that can be used to start a trusted session with the Tableau server.</summary>
        [Newtonsoft.Json.JsonProperty("trustedUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustedUrl { get; set; }
    
        /// <summary>The root URL of the Tableau server with site.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>The site that the TrustedUrl is able to access when used.</summary>
        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Site { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Trusted FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Trusted>(data);
        }
    
    }
    
    /// <summary>Represents information about the associated Tableau server.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TableauServer 
    {
        /// <summary>The root URL of the Tableau server with site.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>The site being used.</summary>
        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Site { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TableauServer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TableauServer>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Site 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adminMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userQuota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserQuota { get; set; }
    
        [Newtonsoft.Json.JsonProperty("storageQuota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageQuota { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revisionHistoryEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RevisionHistoryEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subscribeOthersEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubscribeOthersEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revisionLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RevisionLimit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("guestAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GuestAccessEnabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Site FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Site>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Project 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentPermissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentPermissions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Project FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Project>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Workbook 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showTabs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowTabs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? UpdatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tags Tags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("views", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Views Views { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Workbook FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Workbook>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class User 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("siteRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteRole { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastLogin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalAuthUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalAuthUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tags 
    {
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Tag> Tag { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tags FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tags>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Views 
    {
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<View> View { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Views FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Views>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tag 
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tag FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tag>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class View 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentUrl { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static View FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<View>(data);
        }
    
    }
    
    /// <summary>Encapsulates the data returned when requesting trajectory values through the API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrajectoryValueArray 
    {
        /// <summary>The points in the generated trajectory.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TrajectoryValue> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TrajectoryValueArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrajectoryValueArray>(data);
        }
    
    }
    
    /// <summary>Encapsulates a data point defining the positional information [lat/long/alt] 
    ///             for a sample and the location it occurred at, in seconds from start of file.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrajectoryValue 
    {
        /// <summary>The offset of the value, in seconds from start of file.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Offset { get; set; }
    
        /// <summary>The latitude related to the offset at {Adi.Ems.Web.Api.V2.Dto.TrajectoryValue.Offset}.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        /// <summary>The longitude related to the offset at {Adi.Ems.Web.Api.V2.Dto.TrajectoryValue.Offset}.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        /// <summary>The altitude related to the offset at {Adi.Ems.Web.Api.V2.Dto.TrajectoryValue.Offset}.</summary>
        [Newtonsoft.Json.JsonProperty("altitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Altitude { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TrajectoryValue FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrajectoryValue>(data);
        }
    
    }
    
    /// <summary>Encapsulates a data point defining the userOptions config for a Google Earth export.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TrajectoryConfiguration 
    {
        /// <summary>A unique identifier for this type of KML trajectory. 
        ///             Typically this just the name of the file sans extension.</summary>
        [Newtonsoft.Json.JsonProperty("trajectoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrajectoryId { get; set; }
    
        /// <summary>A description of what kind of trajectory this KML type generates.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TrajectoryConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrajectoryConfiguration>(data);
        }
    
    }
    
    /// <summary>Encapsulates information that will be returned when beginning a new data ingestion transfer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadRequest 
    {
        /// <summary>The name of the transfer; this is not necessarily unique, and is just what the user passed 
        ///             when they initiated the transfer.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The type of the upload; this is the handler that we will use to process the uploaded data.
        ///             The format of the data will be determined by what this upload type is.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadRequestType? Type { get; set; }
    
        /// <summary>The password the data is encrypted with, if any. This point of the encryption possibility
        ///             is that this may be part of a store-and-forward system that stores the data encrypted locally.
        ///             (Thus passing it here along with the data is not particularly a security issue, but rather
        ///             a way to avoid having to decrypt it as it transfers.)
        ///             Note: This is not currently supported with any of the UploadTypes but may be in the future.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        /// <summary>The total size of the data to be transferred. This may be absent in the case where the upload
        ///             is being streamed and the total size is unknown. If provided this allows you to skip making a
        ///             Finish call to the API to explicitly finish the transfer. Instead a Finish will be inferred
        ///             when sufficient bytes have been sent.</summary>
        [Newtonsoft.Json.JsonProperty("totalSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalSize { get; set; }
    
        /// <summary>Arbitrary metadata attached to the transfer record. This may be used by post-processing later
        ///             or for other uses. If this is one of the EMS Collection UploadTypes then this information will
        ///             be added to the generated ident.xml.</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadRequest>(data);
        }
    
    }
    
    /// <summary>Passed back to the client when a multi-part upload is started. This contains further
    ///             instructions on how to proceed with the upload, including the transfer ID to pass to
    ///             future calls, as well as any change of URL for the actual chunk uploads.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadParameters 
    {
        /// <summary>The ID of the transfer; this will be used when making subsequent calls to the upload APIs</summary>
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        /// <summary>The URL for the transfer; data block transfers regarding this upload should go to this URL.
        ///             This may also be an empty string, in which case you should keep using the normal URLs</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadParameters>(data);
        }
    
    }
    
    /// <summary>Summarizes the result of an upload operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadResult 
    {
        /// <summary>If this is true, the transfer was successful and also the transferred data are intact.
        ///             This includes things like verifying the integrity of zip archives, for the overall transfer
        ///             completion</summary>
        [Newtonsoft.Json.JsonProperty("transferSuccessful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransferSuccessful { get; set; }
    
        /// <summary>If there was an error, then the error message will describe it. In the case of success, there
        ///             may also be a message here. This message will be suitable for display to a user</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadResult>(data);
        }
    
    }
    
    /// <summary>This is sent as a response to an upload transfer status request.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadStatus 
    {
        /// <summary>The current number of bytes the server has received on this transfer.</summary>
        [Newtonsoft.Json.JsonProperty("currentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CurrentCount { get; set; }
    
        /// <summary>The state of the upload.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadStatusState? State { get; set; }
    
        /// <summary>Contains a user-readable message about the status of the transfer.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadStatus>(data);
        }
    
    }
    
    /// <summary>Represents one record in the list of uploads that we know about on the server side.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadRecord 
    {
        /// <summary>The transfer ID of the transfer, set by the server when the transfer started</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The type of the upload</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadRecordType? Type { get; set; }
    
        /// <summary>Name field set by the client when the transfer started</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The current number of bytes transferred</summary>
        [Newtonsoft.Json.JsonProperty("currentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CurrentCount { get; set; }
    
        /// <summary>The total size of the transfer, if known</summary>
        [Newtonsoft.Json.JsonProperty("totalSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalSize { get; set; }
    
        /// <summary>The timestamp of the last time someone uploaded bytes to this transfer. This will
        ///             be used to determine when a transfer can be aborted automatically</summary>
        [Newtonsoft.Json.JsonProperty("lastTransfer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastTransfer { get; set; }
    
        /// <summary>The timestamp of the last time someone tried to process this transfer. This will
        ///             be used to determine when a transfer can be aborted automatically</summary>
        [Newtonsoft.Json.JsonProperty("lastProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastProcessing { get; set; }
    
        /// <summary>The start time of the transfer, from when the initial start request is made</summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }
    
        /// <summary>The finish time of the actual data transfer portion of the process</summary>
        [Newtonsoft.Json.JsonProperty("transferFinishTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TransferFinishTime { get; set; }
    
        /// <summary>The finish time of the processing portion of the process</summary>
        [Newtonsoft.Json.JsonProperty("processingFinishTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ProcessingFinishTime { get; set; }
    
        /// <summary>The state of the upload, up to and including EMS hand-off</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadRecordState? State { get; set; }
    
        /// <summary>Metadata for the upload; this is somewhat arbitrary and specific to the type
        ///             of the transfer, but in any event, it will be a JSON blob with key/value pairs</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadRecord>(data);
        }
    
    }
    
    /// <summary>Represents the status of an upload processing through EMS.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadProcessingStatus 
    {
        /// <summary>The upload's download record, if known</summary>
        [Newtonsoft.Json.JsonProperty("downloadRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownloadRecord { get; set; }
    
        /// <summary>A description of the download record's processing state. This should be checked before assuming
        ///             that the download is correct and complete</summary>
        [Newtonsoft.Json.JsonProperty("downloadState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadProcessingStatusDownloadState? DownloadState { get; set; }
    
        /// <summary>The upload's flight information, if known</summary>
        [Newtonsoft.Json.JsonProperty("flights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UploadProcessingFlightStatus> Flights { get; set; }
    
        /// <summary>Any error message associated with the processing of the upload, if any</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadProcessingStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadProcessingStatus>(data);
        }
    
    }
    
    /// <summary>A single flight result within a larger download result.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadProcessingFlightStatus 
    {
        /// <summary>The flight record for the flight</summary>
        [Newtonsoft.Json.JsonProperty("flightRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FlightRecord { get; set; }
    
        /// <summary>A description of the flight record's processing state. This should be checked before assuming
        ///             that the flight is correct and complete</summary>
        [Newtonsoft.Json.JsonProperty("flightStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadProcessingFlightStatusFlightStatus? FlightStatus { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadProcessingFlightStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadProcessingFlightStatus>(data);
        }
    
    }
    
    /// <summary>The name and description of an upload bucket.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Bucket 
    {
        /// <summary>The name of the bucket. This is unique</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Description of the bucket</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The EmsSystem that this bucket is associated with. This is used for determining 
        ///             the EMS Processing status when using the processing status API</summary>
        [Newtonsoft.Json.JsonProperty("associatedEmsSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmsSystem AssociatedEmsSystem { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Bucket FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bucket>(data);
        }
    
    }
    
    /// <summary>Specifies options to use when calling the TAF parse API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TafParseOptions 
    {
        /// <summary>The raw TAF string to parse</summary>
        [Newtonsoft.Json.JsonProperty("taf", Required = Newtonsoft.Json.Required.Always)]
        public string Taf { get; set; }
    
        /// <summary>Date information (in ISO 8601 format) the TAF was issued, since the TAF format doesn't include this 
        ///             information</summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime IssueDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TafParseOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TafParseOptions>(data);
        }
    
    }
    
    /// <summary>Represents an individual TAF report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TafReport 
    {
        /// <summary>Error messages delimited by newlines if there were non-critical issues parsing the raw TAF string</summary>
        [Newtonsoft.Json.JsonProperty("parseErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParseErrors { get; set; }
    
        /// <summary>The time point that this TAF report was issued</summary>
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime Issued { get; set; }
    
        /// <summary>The airport that issued the TAF report</summary>
        [Newtonsoft.Json.JsonProperty("airport", Required = Newtonsoft.Json.Required.Always)]
        public string Airport { get; set; }
    
        /// <summary>The starting time point that this TAF report is valid</summary>
        [Newtonsoft.Json.JsonProperty("validFrom", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ValidFrom { get; set; }
    
        /// <summary>The ending time point that this TAF report is valid</summary>
        [Newtonsoft.Json.JsonProperty("validTo", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTime ValidTo { get; set; }
    
        /// <summary>A list of forecast predictions in the TAF</summary>
        [Newtonsoft.Json.JsonProperty("predictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Prediction> Predictions { get; set; }
    
        /// <summary>The header text for the TAF</summary>
        [Newtonsoft.Json.JsonProperty("headerText", Required = Newtonsoft.Json.Required.Always)]
        public string HeaderText { get; set; }
    
        /// <summary>The time and place relative to a specific flight that this forecast data would match to</summary>
        [Newtonsoft.Json.JsonProperty("flightMatchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TafReportFlightMatchType? FlightMatchType { get; set; }
    
        /// <summary>The forecast data that matches to a specific flight</summary>
        [Newtonsoft.Json.JsonProperty("matchedPrediction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Prediction MatchedPrediction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TafReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TafReport>(data);
        }
    
    }
    
    /// <summary>Represents a forecast prediction originally included in a TAF.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Prediction 
    {
        /// <summary>The ID used to uniquely identify this prediction on an EMS system</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The original, unparsed prediction string</summary>
        [Newtonsoft.Json.JsonProperty("unparsed", Required = Newtonsoft.Json.Required.Always)]
        public string Unparsed { get; set; }
    
        /// <summary>The predicted start time for the weather in this prediction</summary>
        [Newtonsoft.Json.JsonProperty("timeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeFrom { get; set; }
    
        /// <summary>The predicted end time for the weather in this prediction. This is defined by the following predictions start time
        ///             or if it's the last prediction in a TAF it is the end of the validity window</summary>
        [Newtonsoft.Json.JsonProperty("timeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeTo { get; set; }
    
        /// <summary>The time that the prediction weather is expected to occur. This is only used with the "Becoming" change 
        ///             indicator</summary>
        [Newtonsoft.Json.JsonProperty("timeBecoming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeBecoming { get; set; }
    
        /// <summary>The type of conditions change indicator specified. When weather conditions are reported as changing this
        ///             is "None"</summary>
        [Newtonsoft.Json.JsonProperty("weatherChange", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PredictionWeatherChange WeatherChange { get; set; }
    
        /// <summary>The probability of the weather described in this prediction occurring</summary>
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Probability { get; set; }
    
        /// <summary>The wind direction in degrees or, if wind is variable this will be zero</summary>
        [Newtonsoft.Json.JsonProperty("windDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindDirection { get; set; }
    
        /// <summary>The wind speed in knots</summary>
        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindSpeed { get; set; }
    
        /// <summary>The wind gust speed in knots, if wind gust data is present</summary>
        [Newtonsoft.Json.JsonProperty("windGustSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindGustSpeed { get; set; }
    
        /// <summary>The wind shear height in feet, if wind shear data is present</summary>
        [Newtonsoft.Json.JsonProperty("windShearHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindShearHeight { get; set; }
    
        /// <summary>The wind shear direction in degrees, if wind shear data is present</summary>
        [Newtonsoft.Json.JsonProperty("windShearDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindShearDirection { get; set; }
    
        /// <summary>The wind shear speed in knots, if wind shear data is present</summary>
        [Newtonsoft.Json.JsonProperty("windShearSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WindShearSpeed { get; set; }
    
        /// <summary>The horizontal visibility in statute miles. Uses "Infinity" to indicate there is no limit</summary>
        [Newtonsoft.Json.JsonProperty("visibilityHorizontal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityHorizontal { get; set; }
    
        /// <summary>The vertical visibility in feet above ground level</summary>
        [Newtonsoft.Json.JsonProperty("visibilityVertical", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VisibilityVertical { get; set; }
    
        /// <summary>Pressure above ground level in inches of mercury</summary>
        [Newtonsoft.Json.JsonProperty("pressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pressure { get; set; }
    
        /// <summary>Any parts of the raw prediction string that were unable to be decoded</summary>
        [Newtonsoft.Json.JsonProperty("portionNotDecoded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortionNotDecoded { get; set; }
    
        /// <summary>The lowest altitude of "Broken" or "Overcast" cloud conditions or vertical visibility. Uses "Infinity" to 
        ///             indicate there is no limit</summary>
        [Newtonsoft.Json.JsonProperty("ceiling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ceiling { get; set; }
    
        /// <summary>A list of cloud conditions occurring during the prediction</summary>
        [Newtonsoft.Json.JsonProperty("cloudConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CloudCondition> CloudConditions { get; set; }
    
        /// <summary>A list of icing conditions occurring during the prediction</summary>
        [Newtonsoft.Json.JsonProperty("icingConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IcingCondition> IcingConditions { get; set; }
    
        /// <summary>A list of turbulence conditions occurring during the prediction</summary>
        [Newtonsoft.Json.JsonProperty("turbulenceConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TurbulenceCondition> TurbulenceConditions { get; set; }
    
        /// <summary>A list of temperature conditions occurring during the prediction</summary>
        [Newtonsoft.Json.JsonProperty("temperatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Temperature> Temperatures { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Prediction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Prediction>(data);
        }
    
    }
    
    /// <summary>Describes the condition of clouds in the sky.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CloudCondition 
    {
        /// <summary>Specifies the height of the base of a visual portion of a cloud. Uses "Infinity" to designate there is no 
        ///             limit</summary>
        [Newtonsoft.Json.JsonProperty("cloudBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CloudBase { get; set; }
    
        /// <summary>Describes the types of clouds appearing in the sky</summary>
        [Newtonsoft.Json.JsonProperty("cloudType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CloudConditionCloudType? CloudType { get; set; }
    
        /// <summary>Describes the type of cloud cover appearing in the sky</summary>
        [Newtonsoft.Json.JsonProperty("cloudCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CloudConditionCloudCoverage? CloudCoverage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CloudCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CloudCondition>(data);
        }
    
    }
    
    /// <summary>Describes a forecast icing condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IcingCondition 
    {
        /// <summary>The intensity code associated with the icing. Uses the following values: 
        ///             0 - Trace icing or none, 
        ///             1 - Light mixed icing, 
        ///             2 - Light rime icing in cloud, 
        ///             3 - Light clear icing in precipitation, 
        ///             4 - Moderate mixed icing, 
        ///             5 - Moderate rime icing in cloud, 
        ///             6 - Moderate clear icing in precipitation, 
        ///             7 - Severe mixed icing, 
        ///             8 - Severe rime icing in cloud, 
        ///             9 - Severe clear icing in precipitation</summary>
        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Intensity { get; set; }
    
        /// <summary>The base limit of the icing layer in feet</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minimum { get; set; }
    
        /// <summary>The top limit of the icing layer in feet</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IcingCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IcingCondition>(data);
        }
    
    }
    
    /// <summary>Describes a forecast turbulence condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TurbulenceCondition 
    {
        /// <summary>The intensity code associated with the turbulence. Uses the following values: 
        ///             0 - None, 
        ///             1 - Light turbulence, 
        ///             2 - Moderate turbulence in clear air (occasional),
        ///             3 - Moderate turbulence in clear air (frequent),
        ///             4 - Moderate turbulence in cloud (occasional), 
        ///             5 - Moderate turbulence in cloud (frequent),
        ///             6 - Severe turbulence in clear air (occasional),
        ///             7 - Severe turbulence in clear air (frequent),
        ///             8 - Severe turbulence in cloud (occasional),
        ///             9 - Severe turbulence in cloud (frequent)</summary>
        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Intensity { get; set; }
    
        /// <summary>The base limit of the turbulence layer in feet</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minimum { get; set; }
    
        /// <summary>The top limit of the turbulence layer in feet</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TurbulenceCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TurbulenceCondition>(data);
        }
    
    }
    
    /// <summary>Describes a forecast temperature.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Temperature 
    {
        /// <summary>Describes the time at which the temperature forecast is valid</summary>
        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidTime { get; set; }
    
        /// <summary>The expected surface temperature value</summary>
        [Newtonsoft.Json.JsonProperty("surface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Surface { get; set; }
    
        /// <summary>The expected maximum temperature value</summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maximum { get; set; }
    
        /// <summary>The expected minimum temperature value</summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Minimum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Temperature FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Temperature>(data);
        }
    
    }
    
    /// <summary>Specifies options to use when calling the METAR parse API.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetarParseOptions 
    {
        /// <summary>The raw METAR string to parse</summary>
        [Newtonsoft.Json.JsonProperty("metar", Required = Newtonsoft.Json.Required.Always)]
        public string Metar { get; set; }
    
        /// <summary>Optional date information (in ISO 8601 format) the METAR was issued, since the METAR format only includes
        ///             day, hour and minute time information.</summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? IssueDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetarParseOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetarParseOptions>(data);
        }
    
    }
    
    /// <summary>Represents an individual METAR report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetarReport 
    {
        /// <summary>The unparsed but de-identified METAR string</summary>
        [Newtonsoft.Json.JsonProperty("unparsed", Required = Newtonsoft.Json.Required.Always)]
        public string Unparsed { get; set; }
    
        /// <summary>The airport that issued the METAR report</summary>
        [Newtonsoft.Json.JsonProperty("airport", Required = Newtonsoft.Json.Required.Always)]
        public string Airport { get; set; }
    
        /// <summary>The day, hour and minute the METAR was issued. May also optionally contain the month and year issued if the
        ///             date contextual information is available</summary>
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Issued { get; set; }
    
        /// <summary>Indicates whether the original METAR data was automatically generated</summary>
        [Newtonsoft.Json.JsonProperty("isAutomatic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAutomatic { get; set; }
    
        /// <summary>The wind direction in degrees or, if wind is variable this will be zero</summary>
        [Newtonsoft.Json.JsonProperty("windDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindDirection { get; set; }
    
        /// <summary>The wind speed in knots</summary>
        [Newtonsoft.Json.JsonProperty("windSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindSpeed { get; set; }
    
        /// <summary>The wind gust speed in knots, if wind gust data is present</summary>
        [Newtonsoft.Json.JsonProperty("windGustSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindGustSpeed { get; set; }
    
        /// <summary>When wind is variable, the approximate end range of the wind direction in degrees</summary>
        [Newtonsoft.Json.JsonProperty("windDirectionVariableStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindDirectionVariableStart { get; set; }
    
        /// <summary>When wind is variable, the approximate end range of the wind direction in degrees</summary>
        [Newtonsoft.Json.JsonProperty("windDirectionVariableEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WindDirectionVariableEnd { get; set; }
    
        /// <summary>The effective visibility in statute miles</summary>
        [Newtonsoft.Json.JsonProperty("effectiveVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EffectiveVisibility { get; set; }
    
        /// <summary>The exact reported visibility in statute miles. Uses "Infinity" to indicate there is no limit</summary>
        [Newtonsoft.Json.JsonProperty("exactVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExactVisibility { get; set; }
    
        /// <summary>A qualifier describing the current exact reported visibility</summary>
        [Newtonsoft.Json.JsonProperty("visibilityQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarReportVisibilityQualifier? VisibilityQualifier { get; set; }
    
        /// <summary>A list of runway visual ranges for reported runways</summary>
        [Newtonsoft.Json.JsonProperty("runwayVisualRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RunwayVisualRange> RunwayVisualRanges { get; set; }
    
        /// <summary>A list of current weather phenomenons</summary>
        [Newtonsoft.Json.JsonProperty("currentWeather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WeatherPhenomenon> CurrentWeather { get; set; }
    
        /// <summary>A list of recently occurring weather phenomenons</summary>
        [Newtonsoft.Json.JsonProperty("recentWeather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WeatherPhenomenon> RecentWeather { get; set; }
    
        /// <summary>Indicates whether all current/recent reported weather phenomenons had valid sensor data</summary>
        [Newtonsoft.Json.JsonProperty("isWeatherDataValid", Required = Newtonsoft.Json.Required.Always)]
        public bool IsWeatherDataValid { get; set; }
    
        /// <summary>A list of current cloud conditions</summary>
        [Newtonsoft.Json.JsonProperty("cloudConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CloudCondition> CloudConditions { get; set; }
    
        /// <summary>The lowest "Broken", "Overcast" or "Vertical Visibility" cloud conditions associated with this object</summary>
        [Newtonsoft.Json.JsonProperty("ceiling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudCondition Ceiling { get; set; }
    
        /// <summary>Indicates whether all reported cloud conditions had valid sensor data</summary>
        [Newtonsoft.Json.JsonProperty("isCloudDataValid", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCloudDataValid { get; set; }
    
        /// <summary>The maximum height of the base of a visual portion of one of the cloud conditions associated with this 
        ///             object. Uses "Infinity" to indicate there is no limit</summary>
        [Newtonsoft.Json.JsonProperty("maxCloudHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxCloudHeight { get; set; }
    
        /// <summary>The current temperature value in degrees Celsius</summary>
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temperature { get; set; }
    
        /// <summary>The current dew point value in degrees Celsius</summary>
        [Newtonsoft.Json.JsonProperty("dewpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpoint { get; set; }
    
        /// <summary>Pressure above ground level in inches of mercury</summary>
        [Newtonsoft.Json.JsonProperty("pressure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pressure { get; set; }
    
        /// <summary>A list of current runway conditions</summary>
        [Newtonsoft.Json.JsonProperty("runwayConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RunwayCondition> RunwayConditions { get; set; }
    
        /// <summary>The time and place relative to a specific flight that this METAR data would match to</summary>
        [Newtonsoft.Json.JsonProperty("flightMatchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MetarReportFlightMatchType? FlightMatchType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetarReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetarReport>(data);
        }
    
    }
    
    /// <summary>Describes the current 10-minute average visual range for a runway, which is the distance over which a pilot
    ///             can see the runway surface markings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RunwayVisualRange 
    {
        /// <summary>The name/number/approach direction identifying the runway</summary>
        [Newtonsoft.Json.JsonProperty("runway", Required = Newtonsoft.Json.Required.Always)]
        public string Runway { get; set; }
    
        /// <summary>The primary runway visibility distance in feet. If a variable range is set, this value describes the 
        ///             minimum visibility distance in a visual range</summary>
        [Newtonsoft.Json.JsonProperty("visibilityPrimary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityPrimary { get; set; }
    
        /// <summary>A qualifier describing the primary visibility distance</summary>
        [Newtonsoft.Json.JsonProperty("visibilityPrimaryQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayVisualRangeVisibilityPrimaryQualifier? VisibilityPrimaryQualifier { get; set; }
    
        /// <summary>The variable runway visibility distance in feet, describing the maximum visibility distance in the 
        ///             visual range</summary>
        [Newtonsoft.Json.JsonProperty("visibilityVariable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityVariable { get; set; }
    
        /// <summary>A qualifier describing the variable visibility distance</summary>
        [Newtonsoft.Json.JsonProperty("visibilityVariableQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayVisualRangeVisibilityVariableQualifier? VisibilityVariableQualifier { get; set; }
    
        /// <summary>The trend of the runway visibility distance</summary>
        [Newtonsoft.Json.JsonProperty("trend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayVisualRangeTrend? Trend { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RunwayVisualRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RunwayVisualRange>(data);
        }
    
    }
    
    /// <summary>Describes an individual weather phenomenon.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WeatherPhenomenon 
    {
        /// <summary>The original, unparsed weather phenomenon string</summary>
        [Newtonsoft.Json.JsonProperty("unparsed", Required = Newtonsoft.Json.Required.Always)]
        public string Unparsed { get; set; }
    
        /// <summary>Describes the intensity of the whether phenomenon</summary>
        [Newtonsoft.Json.JsonProperty("intensity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonIntensity? Intensity { get; set; }
    
        /// <summary>A qualifier for any weather precipitation</summary>
        [Newtonsoft.Json.JsonProperty("qualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonQualifier? Qualifier { get; set; }
    
        /// <summary>The type of precipitation that this phenomenon represents</summary>
        [Newtonsoft.Json.JsonProperty("precipitation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonPrecipitation? Precipitation { get; set; }
    
        /// <summary>The secondary type of precipitation that can be optionally specified to more accurately describe the 
        ///             precipitation</summary>
        [Newtonsoft.Json.JsonProperty("precipitationSecondary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonPrecipitationSecondary? PrecipitationSecondary { get; set; }
    
        /// <summary>Any weather that can obscure vision</summary>
        [Newtonsoft.Json.JsonProperty("obscuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonObscuration? Obscuration { get; set; }
    
        /// <summary>Other weather cases that do not fall under precipitation</summary>
        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherPhenomenonOther? Other { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeatherPhenomenon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherPhenomenon>(data);
        }
    
    }
    
    /// <summary>Describes the condition of a runway.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RunwayCondition 
    {
        /// <summary>The original, unparsed runway conditions string</summary>
        [Newtonsoft.Json.JsonProperty("unparsed", Required = Newtonsoft.Json.Required.Always)]
        public string Unparsed { get; set; }
    
        /// <summary>The name/number/approach direction identifying the runway</summary>
        [Newtonsoft.Json.JsonProperty("runway", Required = Newtonsoft.Json.Required.Always)]
        public string Runway { get; set; }
    
        /// <summary>The type of deposits currently on the runway</summary>
        [Newtonsoft.Json.JsonProperty("depositType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayConditionDepositType? DepositType { get; set; }
    
        /// <summary>The coverage of deposits currently on the runway</summary>
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayConditionCoverage? Coverage { get; set; }
    
        /// <summary>Indicates the depth of deposits currently on the runway in centimeters</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        /// <summary>The "braking action" value describing the current braking conditions of the runway</summary>
        [Newtonsoft.Json.JsonProperty("braking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RunwayConditionBraking? Braking { get; set; }
    
        /// <summary>The "coefficient of friction" value that alternatively describes the current braking conditions of the 
        ///             runway</summary>
        [Newtonsoft.Json.JsonProperty("friction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Friction { get; set; }
    
        /// <summary>Indicating whether the runway conditions are clear of deposits</summary>
        [Newtonsoft.Json.JsonProperty("isClear", Required = Newtonsoft.Json.Required.Always)]
        public bool IsClear { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RunwayCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RunwayCondition>(data);
        }
    
    }
    
    /// <summary>Defines the options that can be used to query for TAF reports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TafQuery 
    {
        /// <summary>Optional airport ID for an airport returned by the Assets APIs. If set then ICAO code should not be set</summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirportId { get; set; }
    
        /// <summary>Optional airport ICAO code. If set then airportId should not be set</summary>
        [Newtonsoft.Json.JsonProperty("airportIcao", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AirportIcao { get; set; }
    
        /// <summary>Optional date range from filter. If set all TAFs issued after this value will be returned</summary>
        [Newtonsoft.Json.JsonProperty("issueRangeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? IssueRangeFrom { get; set; }
    
        /// <summary>Optional date range to filter. If set all TAFs issued before this value will be returned</summary>
        [Newtonsoft.Json.JsonProperty("issueRangeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? IssueRangeTo { get; set; }
    
        /// <summary>Optional date range from filter. If set any TAF that is valid from this point to validRangeTo
        ///             will be returned. If set validRangeTo must also be set</summary>
        [Newtonsoft.Json.JsonProperty("validRangeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidRangeFrom { get; set; }
    
        /// <summary>Optional date range from filter. If set any TAF that is valid to this point from validRangeFrom
        ///             will be returned. If set validRangeFrom must also be set</summary>
        [Newtonsoft.Json.JsonProperty("validRangeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidRangeTo { get; set; }
    
        /// <summary>Optional single time point for which to return all valid TAFs</summary>
        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidTime { get; set; }
    
        /// <summary>Optional value indicating the minimum observed visibility in miles. Since TAFs have multiple visibility values if any one value in the TAF meets 
        ///             this criteria that TAF will be returned</summary>
        [Newtonsoft.Json.JsonProperty("visibilityMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityMinimum { get; set; }
    
        /// <summary>Optional value indicating the maximum observed visibility in miles. Since TAFs have multiple visibility values if any one value in the TAF meets 
        ///             this criteria that TAF will be returned</summary>
        [Newtonsoft.Json.JsonProperty("visibilityMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityMaximum { get; set; }
    
        /// <summary>Optional value indicating the minimum observed ceiling in feet. Since TAFs have multiple visibility values if any one value in the TAF meets 
        ///             this criteria that TAF will be returned</summary>
        [Newtonsoft.Json.JsonProperty("ceilingMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CeilingMinimum { get; set; }
    
        /// <summary>Optional value indicating the maximum observed ceiling in feet. Since TAFs have multiple visibility values if any one value in the TAF meets 
        ///             this criteria that TAF will be returned</summary>
        [Newtonsoft.Json.JsonProperty("ceilingMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CeilingMaximum { get; set; }
    
        /// <summary>The maximum number of results to return. If set to 0 all results will be returned. This defaults to 200</summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TafQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TafQuery>(data);
        }
    
    }
    
    /// <summary>Defines the options that can be used to query for METAR reports.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MetarQuery 
    {
        /// <summary>Optional airport ID for an airport returned by the Assets APIs. If set then ICAO code should not be set</summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AirportId { get; set; }
    
        /// <summary>Optional airport ICAO code. If set then airportId should not be set</summary>
        [Newtonsoft.Json.JsonProperty("airportIcao", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AirportIcao { get; set; }
    
        /// <summary>Optional date range from filter. If set all METARs issued after this value will be returned</summary>
        [Newtonsoft.Json.JsonProperty("observationRangeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ObservationRangeFrom { get; set; }
    
        /// <summary>Optional date range to filter. If set all METARs issued before this value will be returned</summary>
        [Newtonsoft.Json.JsonProperty("observationRangeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ObservationRangeTo { get; set; }
    
        /// <summary>Optional value indicating the minimum observed visibility in miles</summary>
        [Newtonsoft.Json.JsonProperty("visibilityMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityMinimum { get; set; }
    
        /// <summary>Optional value indicating the maximum observed visibility in miles</summary>
        [Newtonsoft.Json.JsonProperty("visibilityMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VisibilityMaximum { get; set; }
    
        /// <summary>Optional value indicating the minimum observed ceiling in feet</summary>
        [Newtonsoft.Json.JsonProperty("ceilingMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CeilingMinimum { get; set; }
    
        /// <summary>Optional value indicating the maximum observed ceiling in feet</summary>
        [Newtonsoft.Json.JsonProperty("ceilingMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CeilingMaximum { get; set; }
    
        /// <summary>The maximum number of results to return. If set to 0 all results will be returned. This defaults to 200</summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetarQuery FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetarQuery>(data);
        }
    
    }
    
    /// <summary>Represents TAF and METAR weather reports collected by an EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WeatherReport 
    {
        /// <summary>A list of collected TAF reports from an EMS system</summary>
        [Newtonsoft.Json.JsonProperty("tafReports", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<TafReport> TafReports { get; set; } = new System.Collections.ObjectModel.ObservableCollection<TafReport>();
    
        /// <summary>A list of collected METAR reports from an EMS system</summary>
        [Newtonsoft.Json.JsonProperty("metarReports", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<MetarReport> MetarReports { get; set; } = new System.Collections.ObjectModel.ObservableCollection<MetarReport>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WeatherReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherReport>(data);
        }
    
    }
    
    /// <summary>The category of analytics to search, including "Full", "Physical" or "Logical". A 
    ///             null value specifies the default analytic set, which represents the full set of values exposed by the 
    ///             backing EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Category
    {
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "physical")]
        Physical = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "logical")]
        Logical = 2,
    
    }
    
    /// <summary>The category of analytics to search, including "Full", "Physical" or "Logical". A 
    ///             null value specifies the default analytic set, which represents the full set of values exposed by the 
    ///             backing EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Category2
    {
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "physical")]
        Physical = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "logical")]
        Logical = 2,
    
    }
    
    /// <summary>The category of analytics we are interested in. "Full", "Physical" or "Logical". 
    ///             A null value specifies the default analytic set, which represents the full set of values exposed by the backing EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Category3
    {
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "physical")]
        Physical = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "logical")]
        Logical = 2,
    
    }
    
    /// <summary>The category of analytics we are interested in. "Full", "Physical" or "Logical". 
    ///             A null value specifies the default analytic set, which represents the full set of values exposed by the backing EMS system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Category4
    {
        [System.Runtime.Serialization.EnumMember(Value = "full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "physical")]
        Physical = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "logical")]
        Logical = 2,
    
    }
    
    /// <summary>The format the glossary should be returned in. This defaults to CSV.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Format
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "csv")]
        Csv = 1,
    
    }
    
    /// <summary>The format of the returned glossary. Defaults to JSON.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Format2
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "csv")]
        Csv = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QueryUnsampledDataMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "leaveBlank")]
        LeaveBlank = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "uniquePreviousSample")]
        UniquePreviousSample = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "stairStep")]
        StairStep = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "linearInterpolation")]
        LinearInterpolation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "parameterDefault")]
        ParameterDefault = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "previousSample")]
        PreviousSample = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OffsetTypeType
    {
        [System.Runtime.Serialization.EnumMember(Value = "sampledValues")]
        SampledValues = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "fixedRate")]
        FixedRate = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FieldType
    {
        [System.Runtime.Serialization.EnumMember(Value = "boolean")]
        Boolean = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateTime")]
        DateTime = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "discrete")]
        Discrete = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "number")]
        Number = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "string")]
        String = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DbQueryFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "display")]
        Display = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SelectColumnAggregate
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "avg")]
        Avg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "count")]
        Count = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "max")]
        Max = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "min")]
        Min = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "stdev")]
        Stdev = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "sum")]
        Sum = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "var")]
        Var = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SelectColumnFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "display")]
        Display = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderByColumnAggregate
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "avg")]
        Avg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "count")]
        Count = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "max")]
        Max = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "min")]
        Min = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "stdev")]
        Stdev = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "sum")]
        Sum = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "var")]
        Var = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OrderByColumnOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = "asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "desc")]
        Desc = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FilterOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "isTrue")]
        IsTrue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "isFalse")]
        IsFalse = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "isNull")]
        IsNull = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "isNotNull")]
        IsNotNull = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "and")]
        And = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "or")]
        Or = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "not")]
        Not = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "in")]
        In = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "notIn")]
        NotIn = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "plus")]
        Plus = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "minus")]
        Minus = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "multiply")]
        Multiply = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "divide")]
        Divide = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "modulo")]
        Modulo = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "notEqual")]
        NotEqual = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "lessThanOrEqual")]
        LessThanOrEqual = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "greaterThanOrEqual")]
        GreaterThanOrEqual = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "betweenInclusive")]
        BetweenInclusive = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "betweenLowerExclusive")]
        BetweenLowerExclusive = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "betweenUpperExclusive")]
        BetweenUpperExclusive = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "betweenExclusive")]
        BetweenExclusive = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "notBetweenInclusive")]
        NotBetweenInclusive = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "notBetweenLowerExclusive")]
        NotBetweenLowerExclusive = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "notBetweenUpperExclusive")]
        NotBetweenUpperExclusive = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = "notBetweenExclusive")]
        NotBetweenExclusive = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = "integerRangeInclude")]
        IntegerRangeInclude = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = "integerRangeExclude")]
        IntegerRangeExclude = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = "realRangeInclude")]
        RealRangeInclude = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = "realRangeExclude")]
        RealRangeExclude = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = "like")]
        Like = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = "notLike")]
        NotLike = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = "allWords")]
        AllWords = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = "anyWords")]
        AnyWords = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = "noWords")]
        NoWords = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateRelative")]
        DateRelative = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateSpecificMonths")]
        DateSpecificMonths = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateSpecificMonth")]
        DateSpecificMonth = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateBeforeMonth")]
        DateBeforeMonth = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateOnAfterMonth")]
        DateOnAfterMonth = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateSpecificDays")]
        DateSpecificDays = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateSpecificDay")]
        DateSpecificDay = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateBeforeDay")]
        DateBeforeDay = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateOnAfterDay")]
        DateOnAfterDay = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateTimeRange")]
        DateTimeRange = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateTimeBefore")]
        DateTimeBefore = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateTimeOnAfter")]
        DateTimeOnAfter = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateQuarterOfYear")]
        DateQuarterOfYear = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateMonthOfYear")]
        DateMonthOfYear = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateDayOfWeek")]
        DateDayOfWeek = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = "dateTimeHourOfDay")]
        DateTimeHourOfDay = 52,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FilterArgumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "filter")]
        Filter = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "field")]
        Field = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "constant")]
        Constant = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2RecordType
    {
        [System.Runtime.Serialization.EnumMember(Value = "measurement")]
        Measurement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "timepoint")]
        Timepoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "event")]
        Event = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "interval")]
        Interval = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2Scope
    {
        [System.Runtime.Serialization.EnumMember(Value = "default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventSpecific")]
        EventSpecific = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventGlobal")]
        EventGlobal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2DataType
    {
        [System.Runtime.Serialization.EnumMember(Value = "floatingPoint")]
        FloatingPoint = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2FirstAssociatedItemType
    {
        [System.Runtime.Serialization.EnumMember(Value = "measurement")]
        Measurement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "timepoint")]
        Timepoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "event")]
        Event = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "interval")]
        Interval = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2FirstAssociatedItemScope
    {
        [System.Runtime.Serialization.EnumMember(Value = "default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventSpecific")]
        EventSpecific = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventGlobal")]
        EventGlobal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2SecondAssociatedItemType
    {
        [System.Runtime.Serialization.EnumMember(Value = "measurement")]
        Measurement = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "timepoint")]
        Timepoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "event")]
        Event = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "interval")]
        Interval = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GlossaryItem2SecondAssociatedItemScope
    {
        [System.Runtime.Serialization.EnumMember(Value = "default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventSpecific")]
        EventSpecific = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "eventGlobal")]
        EventGlobal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = "emsCollectionZipped")]
        EmsCollectionZipped = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "testTransfer")]
        TestTransfer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "emsCollectionRaw")]
        EmsCollectionRaw = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadStatusState
    {
        [System.Runtime.Serialization.EnumMember(Value = "transferring")]
        Transferring = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "waitingProcessing")]
        WaitingProcessing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "processing")]
        Processing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "processedSuccess")]
        ProcessedSuccess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "processedFailure")]
        ProcessedFailure = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "abandonedTransfer")]
        AbandonedTransfer = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "abandonedProcessing")]
        AbandonedProcessing = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "canceled")]
        Canceled = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadRecordType
    {
        [System.Runtime.Serialization.EnumMember(Value = "emsCollectionZipped")]
        EmsCollectionZipped = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "testTransfer")]
        TestTransfer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "emsCollectionRaw")]
        EmsCollectionRaw = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadRecordState
    {
        [System.Runtime.Serialization.EnumMember(Value = "transferring")]
        Transferring = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "waitingProcessing")]
        WaitingProcessing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "processing")]
        Processing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "processedSuccess")]
        ProcessedSuccess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "processedFailure")]
        ProcessedFailure = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "abandonedTransfer")]
        AbandonedTransfer = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "abandonedProcessing")]
        AbandonedProcessing = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "canceled")]
        Canceled = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadProcessingStatusDownloadState
    {
        [System.Runtime.Serialization.EnumMember(Value = "notProcessed")]
        NotProcessed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "processed")]
        Processed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "failure")]
        Failure = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UploadProcessingFlightStatusFlightStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "notProcessed")]
        NotProcessed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "processed")]
        Processed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "failure")]
        Failure = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TafReportFlightMatchType
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "takeoffAtDispatch")]
        TakeoffAtDispatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "landingAtDispatch")]
        LandingAtDispatch = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "alternateAtDispatch")]
        AlternateAtDispatch = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "landingAtTakeoff")]
        LandingAtTakeoff = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "alternateAtTakeoff")]
        AlternateAtTakeoff = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "alternateAtLanding")]
        AlternateAtLanding = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PredictionWeatherChange
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "from")]
        From = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "becoming")]
        Becoming = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "temporary")]
        Temporary = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "probability")]
        Probability = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "intermediate")]
        Intermediate = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CloudConditionCloudType
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "cumulonimbus")]
        Cumulonimbus = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "toweringCumulis")]
        ToweringCumulis = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "cumulusMediocris")]
        CumulusMediocris = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CloudConditionCloudCoverage
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "few")]
        Few = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "scattered")]
        Scattered = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "broken")]
        Broken = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "overcast")]
        Overcast = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "verticalVisibility")]
        VerticalVisibility = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "clear")]
        Clear = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MetarReportVisibilityQualifier
    {
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MetarReportFlightMatchType
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "takeoff")]
        Takeoff = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "landing")]
        Landing = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayVisualRangeVisibilityPrimaryQualifier
    {
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayVisualRangeVisibilityVariableQualifier
    {
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayVisualRangeTrend
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "noChange")]
        NoChange = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "increasing")]
        Increasing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "decreasing")]
        Decreasing = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonIntensity
    {
        [System.Runtime.Serialization.EnumMember(Value = "light")]
        Light = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "moderate")]
        Moderate = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "heavy")]
        Heavy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "vicinity")]
        Vicinity = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonQualifier
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "shallow")]
        Shallow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "partial")]
        Partial = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "patchy")]
        Patchy = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "drifting")]
        Drifting = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "blowing")]
        Blowing = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "showers")]
        Showers = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "thunderstorms")]
        Thunderstorms = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "freezing")]
        Freezing = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonPrecipitation
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "drizzle")]
        Drizzle = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "rain")]
        Rain = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "snow")]
        Snow = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "snowGrains")]
        SnowGrains = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "iceCrystals")]
        IceCrystals = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "icePellets")]
        IcePellets = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "hail")]
        Hail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "smallHail")]
        SmallHail = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonPrecipitationSecondary
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "drizzle")]
        Drizzle = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "rain")]
        Rain = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "snow")]
        Snow = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "snowGrains")]
        SnowGrains = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "iceCrystals")]
        IceCrystals = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "icePellets")]
        IcePellets = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "hail")]
        Hail = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "smallHail")]
        SmallHail = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonObscuration
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "mist")]
        Mist = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "fog")]
        Fog = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "smoke")]
        Smoke = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "volcanicAsh")]
        VolcanicAsh = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "dust")]
        Dust = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "sand")]
        Sand = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "haze")]
        Haze = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "spray")]
        Spray = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum WeatherPhenomenonOther
    {
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "dustWhirls")]
        DustWhirls = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "squalls")]
        Squalls = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "funnelCloud")]
        FunnelCloud = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "sandstorm")]
        Sandstorm = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "duststorm")]
        Duststorm = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayConditionDepositType
    {
        [System.Runtime.Serialization.EnumMember(Value = "dry")]
        Dry = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "damp")]
        Damp = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "wet")]
        Wet = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "frost")]
        Frost = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "snowDry")]
        SnowDry = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "snowWet")]
        SnowWet = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "slush")]
        Slush = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ice")]
        Ice = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "snowCompacted")]
        SnowCompacted = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "frozenRuts")]
        FrozenRuts = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayConditionCoverage
    {
        [System.Runtime.Serialization.EnumMember(Value = "coverage10Less")]
        Coverage10Less = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "coverage11To25")]
        Coverage11To25 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "covarege26To50")]
        Covarege26To50 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "coverage51To100")]
        Coverage51To100 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "noInformation")]
        NoInformation = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.73.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RunwayConditionBraking
    {
        [System.Runtime.Serialization.EnumMember(Value = "unreliable")]
        Unreliable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "poor")]
        Poor = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "mediumPoor")]
        MediumPoor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "medium")]
        Medium = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "mediumGood")]
        MediumGood = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "good")]
        Good = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "none")]
        None = 6,
    
    }

}