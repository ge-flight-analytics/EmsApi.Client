<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1</TargetFrameworks>
    <PackageId>EmsApi.Dto</PackageId>
    <EnableDefaultItems>false</EnableDefaultItems>
    <Description>.NET data transfer objects for the Event Measurement System API</Description>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.JSon" Version="13.0.2" />
    <PackageReference Include="NSwag.MSBuild" Version="13.16.1">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="RoslynCodeTaskFactory" Version="2.0.7">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <Compile Include="Column.cs" />
    <Compile Include="EmsApi.Dto.V2.cs" />
    <Compile Include="Field.cs" />
  </ItemGroup>

  <!-- 
    This stuff exists because we need to run the NSwag generation once before the individual framework builds run. Typically
    you cannot reference targets that are imported via nuget with BeforeTarget="DispatchToInnerBuilds" without specifying a
    TargetFramework for it. So we have an "inner" task that actual does the work, and an "outer" task that calls it with the
    first target framework in the list.
  -->

  <PropertyGroup>
    <FirstTargetFramework Condition=" '$(TargetFrameworks)' == '' ">$(TargetFramework)</FirstTargetFramework>
    <FirstTargetFramework Condition=" '$(FirstTargetFrameworks)' == '' ">$(TargetFrameworks.Split(';')[0])</FirstTargetFramework>
  </PropertyGroup>

  <Target Name="NSwag" BeforeTargets="DispatchToInnerBuilds">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="NswagInner" Properties="TargetFramework=$(FirstTargetFramework)" />
  </Target>

  <Target Name="NSwagInner">
    <Delete Files="EmsApi.Dto.V2.cs" />
    <Exec Command="$(NSwagExe_Net60) run settings.nswag" />
    <ItemGroup>
      <!-- Both the analytics and database query objects get put in the same namespace here -->
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[Query2]]></Find>
        <ReplaceWith><![CDATA[DbQuery]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[QueryResult2]]></Find>
        <ReplaceWith><![CDATA[DbQueryResult]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[QueryResultHeader]]></Find>
        <ReplaceWith><![CDATA[DbQueryResultHeader]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[User2]]></Find>
        <ReplaceWith><![CDATA[User]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[EmsSystem2]]></Find>
        <ReplaceWith><![CDATA[EmsSystem]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[Definition2]]></Find>
        <ReplaceWith><![CDATA[AnalyticExportDefinition]]></ReplaceWith>
      </RegexTransform>
      <RegexTransform Include="EmsApi.Dto.V2.cs">
        <Find><![CDATA[Definition3]]></Find>
        <ReplaceWith><![CDATA[RawFlightDataExportDefinition]]></ReplaceWith>
      </RegexTransform>
    </ItemGroup>
    <RegexTransform Items="@(RegexTransform)" />
  </Target>

  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)" Condition=" '$(RoslynCodeTaskFactory)' != '' ">
    <ParameterGroup>
        <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
        <Using Namespace="System.IO" />
        <Using Namespace="System.Text.RegularExpressions" />
        <Using Namespace="Microsoft.Build.Framework" />
        <Code Type="Fragment" Language="cs">
          <![CDATA[
            foreach(var item in Items)
            {
              string fileName = item.GetMetadata("FullPath");
              string find = item.GetMetadata("Find");
              string replaceWith = item.GetMetadata("ReplaceWith");
              string optionsValue = item.GetMetadata("Options") ?? "";

              var options = string.IsNullOrWhiteSpace(optionsValue) ?
                  RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));

              if(!File.Exists(fileName))
              {
                Log.LogError("Could not find file: {0}", fileName);
                return false;
              }
              string content = File.ReadAllText(fileName);
              File.WriteAllText(
                fileName,
                Regex.Replace(
                  content,
                  find,
                  replaceWith,
                  options
                )
              );
            }
          ]]>
        </Code>
    </Task>
  </UsingTask>

</Project>
