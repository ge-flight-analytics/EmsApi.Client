# Do not automatically trigger
trigger: none
pr: none

variables:
  # The following default variables need to be defined in the pipeline:
  # sourceBranch = master
  # githubRelease = true
  # nugetRelease = true
  sourcePipelineId: 4
  sourceProjectName: ems-api-sdk
  githubServiceConnection: ge-flight-analytics-pat
  nugetServiceConnection: nuget-public
  doGithubRelease: $[in(variables['githubRelease'], 'true', 'True', 'TRUE')]
  doNugetRelease: $[in(variables['nugetRelease'], 'true', 'True', 'TRUE')]

jobs:

- deployment: github
  displayName: GitHub.com
  pool:
    vmImage: windows-latest
  condition: eq(variables['doGithubRelease'], True)
  environment: github
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        - task: DownloadPipelineArtifact@2
          displayName: Download artifacts
          inputs:
            source: specific
            project: $(sourceProjectName)
            pipeline: $(sourcePipelineId)
            runVersion: latestFromBranch
            runBranch: refs/heads/$(sourceBranch)
            path: $(Build.ArtifactStagingDirectory)

        - pwsh: |
            $packageDirectory = Join-Path '$(Build.ArtifactStagingDirectory)' 'drop/packages'
            $package = Get-ChildItem $packageDirectory -Filter EmsApi.Client.*.nupkg | Select -First 1 -ExpandProperty Name
            $exp = "EmsApi\.Client\.(?<version>[\d]+\.[\d]+\.[\d]+)\.nupkg"
            $matchInfo = $package | Select-String $exp
            if( -not $matchInfo.Matches.Success ) {
              throw "The regular expression $exp did not match anything in the $package file."
            }

            $version = $matchInfo.Matches.Groups | Where Name -eq "version" | Select-Object -ExpandProperty Value
            Write-Host "##vso[task.setvariable variable=releaseVersion]$version"
          displayName: Determine tag

        - task: GitHubRelease@0
          displayName: Create GitHub release
          inputs:
            gitHubConnection: $(githubServiceConnection)
            tagSource: manual
            tag: v$(releaseVersion)
            title: Version $(releaseVersion)
            releaseNotesFile: ReleaseNotes.md
            assets: $(Build.ArtifactStagingDirectory)/drop/*

- deployment: nuget
  displayName: NuGet.org
  pool:
    vmImage: windows-latest
  condition: eq(variables['doNugetRelease'], True)
  environment: nuget
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          displayName: Download artifacts
          inputs:
            source: specific
            project: $(sourceProjectName)
            pipeline: $(sourcePipelineId)
            runVersion: latestFromBranch
            runBranch: refs/heads/$(sourceBranch)
            path: $(Build.ArtifactStagingDirectory)

        - task: NuGetCommand@2
          displayName: Push to NuGet.org
          inputs:
            command: push
            packagesToPush: $(Build.ArtifactStagingDirectory)/drop/*.nupkg
            nuGetFeedType: external
            publishFeedCredentials: $(nugetServiceConnection)